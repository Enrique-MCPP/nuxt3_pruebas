{"ast":null,"code":"import GenericCRUD from './GenericCRUD.vue';\nimport PedidoService from '@/service/PedidoService';\nexport default {\n  components: {\n    GenericCRUD\n  },\n\n  data() {\n    /*\r\n    const options = [\r\n        { label: \"Opción 1\", value: \"opcion1\" },\r\n        { label: \"Opción 2\", value: \"opcion2\" },\r\n        { label: \"Opción 3\", value: \"opcion3\" },\r\n        { label: \"Opción 4\", value: \"opcion4\" },\r\n    ];*/\n    return {\n      /************  Datatatble  ******************/\n      crudColumns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'Nº de seguimiento',\n        field: 'numSeguimiento'\n      }, {\n        title: 'Método de pago',\n        field: 'metodoDePago'\n      }, {\n        title: 'Estado',\n        field: 'estado.nombre'\n      }, {\n        title: 'Precio total',\n        field: 'precioTotal'\n      }, {\n        title: 'Dirección de envío',\n        field: 'direccionEnvio'\n      }, {\n        title: 'Observaciones',\n        field: 'observaciones'\n      }],\n      pathListDatatable: 'api/pedido/',\n      editedRow: {\n        id: null,\n        estado: null,\n        productos: [],\n        precioTotal: null,\n        direccionEnvio: null,\n        metodoDePago: null,\n        numSeguimiento: null,\n        fechaCreacion: new Date(),\n        observaciones: null,\n        esPedidoCaro: null\n      },\n      header: \"Lista de Pedidos\",\n\n      /************  Panel inputs  ******************/\n      crudInputs: [{\n        label: 'Pedido caro',\n        value: 'esPedidoCaro',\n        component: 'p:triStateCheckbox'\n      }],\n\n      /************  Botones  ******************/\n      crudButtons: [{\n        label: 'Nuevo',\n        onClick: \"create\",\n        icon: 'pi pi-plus',\n        className: 'p-button-success mr-2',\n        component: 'p:commandButton'\n      }, {\n        label: 'Guardar',\n        onClick: \"save\",\n        icon: 'pi pi-save',\n        className: '',\n        component: 'p:commandButton'\n      }, {\n        label: 'Eliminar',\n        onClick: \"remove\",\n        icon: 'pi pi-trash',\n        className: 'p-button-danger',\n        component: 'p:commandButton'\n      }]\n      /*\r\n      crudInputs: [\r\n          { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n          { label: 'Email', value: 'email', component: 'p:inputText' },\r\n          //selectOneMenu proporcionando lista directamente como variable en el cuerpo de data\r\n          {\r\n              label: 'Estado con lista como variable',\r\n              value: 'estadoUno',\r\n              component: 'p:selectOneMenu',\r\n              options\r\n            },\r\n          //selectOneMenu proporcionando lista directamente\r\n            {\r\n              label: 'Estado',\r\n              value: 'estadoDos',\r\n              component: 'p:selectOneMenu',\r\n              options: [\r\n                  { label: 'Opción 1', value: 'opcion1' },\r\n                  { label: 'Opción 2', value: 'opcion2' },\r\n                  { label: 'Opción 3', value: 'opcion3' },\r\n                  { label: 'Opción 4', value: 'opcion4' }\r\n              ],\r\n            },\r\n          //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n          {\r\n              id: 'idProducto',\r\n              label: 'Selecciona un producto',\r\n              value: 'producto',\r\n              customValue: true,\r\n              component: 'p:selectOneMenu',\r\n              pathList: \"/api/product/\"\r\n            },\r\n          {\r\n              id: 'idProducto',\r\n              label: 'Selecciona varios productos',\r\n              value: 'productos',\r\n              component: 'p:selectCheckBoxMenu',\r\n              pathList: \"/api/product/\"\r\n            },\r\n          { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n          {\r\n              label: 'En stock',\r\n              value: 'checkBox',\r\n              component: 'p:triStateCheckbox'\r\n          },\r\n          {\r\n              id: 'idDialogproductosUno',\r\n              label: 'Selecciona productos uno',\r\n              component: 'ZDialog',\r\n              zDialogData: [],\r\n              zDialogColumns: [ //agregar las columnas aquí\r\n                  { field: 'id', header: 'ID' },\r\n                  { field: 'nombre', header: 'Nombre' },\r\n                  { field: 'descripción', header: 'Descripción' },\r\n              ],\r\n              localLabelDialogButton: 'Selecciona productos uno',\r\n              pathList: \"/api/product/\",\r\n              header: \"Lista de Productos\",\r\n          },\r\n          {\r\n              id: 'idDialogproductosDos',\r\n              label: 'Selecciona otros productos dos',\r\n              component: 'ZDialog',\r\n              zDialogData: [],\r\n              zDialogColumns: [ //agregar las columnas aquí\r\n                  { field: 'id', header: 'ID' },\r\n                  { field: 'nombre', header: 'Nombre' },\r\n                  { field: 'descripción', header: 'Descripción' },\r\n              ],\r\n              localLabelDialogButton: 'Selecciona productos dos',\r\n              pathList: \"/api/product/\",\r\n              header: \"Lista de Productos\",\r\n          }\r\n      ]*/\n\n    };\n  },\n\n  beforeCreate() {\n    this.pedidoService = new PedidoService();\n  },\n\n  methods: {\n    onElementosDialogSeleccionados(elementosSeleccionados, idDialog, localEditedRow) {\n      if (idDialog === 'idDialogproductosUno') {\n        this.selectedPedidoosUnoList = elementosSeleccionados;\n        localEditedRow.productos = this.selectedPedidoosUnoList;\n      } else if (idDialog === 'idDialogproductosDos') {\n        this.selectedPedidoosDosList = elementosSeleccionados;\n        localEditedRow.productos = this.selectedPedidoosUnoList;\n      }\n    },\n\n    beforeInsert(callback) {\n      // aquí se hace todo el proceso previo al guardado\n      // cuando termine, se llama a la función de callback\n      console.log('BeforeSave del padre');\n      callback();\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAYA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAGA,eAAe;AACXC,YAAU,EAAE;AACRF;AADQ,GADD;;AAKXG,MAAI,GAAG;AACH;;;;;;;AAOA,WAAO;AAEH;AACAC,iBAAW,EAAE,CACT;AAAEC,aAAK,EAAE,IAAT;AAAeC,aAAK,EAAE;AAAtB,OADS,EAET;AAAED,aAAK,EAAE,mBAAT;AAA8BC,aAAK,EAAE;AAArC,OAFS,EAGT;AAAED,aAAK,EAAE,gBAAT;AAA2BC,aAAK,EAAE;AAAlC,OAHS,EAIT;AAAED,aAAK,EAAE,QAAT;AAAmBC,aAAK,EAAE;AAA1B,OAJS,EAKT;AAAED,aAAK,EAAE,cAAT;AAAyBC,aAAK,EAAE;AAAhC,OALS,EAMT;AAAED,aAAK,EAAE,oBAAT;AAA+BC,aAAK,EAAE;AAAtC,OANS,EAOT;AAAED,aAAK,EAAE,eAAT;AAA0BC,aAAK,EAAE;AAAjC,OAPS,CAHV;AAYHC,uBAAiB,EAAE,aAZhB;AAaHC,eAAS,EAAE;AACPC,UAAE,EAAE,IADG;AAEPC,cAAM,EAAE,IAFD;AAGPC,iBAAS,EAAE,EAHJ;AAIPC,mBAAW,EAAE,IAJN;AAKPC,sBAAc,EAAE,IALT;AAMPC,oBAAY,EAAE,IANP;AAOPC,sBAAc,EAAE,IAPT;AAQPC,qBAAa,EAAE,IAAIC,IAAJ,EARR;AASPC,qBAAa,EAAE,IATR;AAUPC,oBAAY,EAAE;AAVP,OAbR;AAyBHC,YAAM,EAAE,kBAzBL;;AA2BH;AACAC,gBAAU,EAAE,CAER;AACIC,aAAK,EAAE,aADX;AAEIC,aAAK,EAAE,cAFX;AAGIC,iBAAS,EAAE;AAHf,OAFQ,CA5BT;;AAsCH;AACAC,iBAAW,EAAE,CACT;AACIH,aAAK,EAAE,OADX;AAEII,eAAO,EAAE,QAFb;AAGIC,YAAI,EAAE,YAHV;AAIIC,iBAAS,EAAE,uBAJf;AAKIJ,iBAAS,EAAE;AALf,OADS,EAQT;AACIF,aAAK,EAAE,SADX;AAEII,eAAO,EAAE,MAFb;AAGIC,YAAI,EAAE,YAHV;AAIIC,iBAAS,EAAE,EAJf;AAKIJ,iBAAS,EAAE;AALf,OARS,EAeT;AACIF,aAAK,EAAE,UADX;AAEII,eAAO,EAAE,QAFb;AAGIC,YAAI,EAAE,aAHV;AAIIC,iBAAS,EAAE,iBAJf;AAKIJ,iBAAS,EAAE;AALf,OAfS;AAwBb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/DG,KAAP;AAqJH,GAlKU;;AAmKXK,cAAY,GAAG;AACX,SAAKC,aAAL,GAAqB,IAAI7B,aAAJ,EAArB;AAGH,GAvKU;;AAyKX8B,SAAO,EAAE;AACLC,kCAA8B,CAACC,sBAAD,EAAyBC,QAAzB,EAAmCC,cAAnC,EAAmD;AAC7E,UAAID,QAAO,KAAM,sBAAjB,EAAyC;AACrC,aAAKE,uBAAL,GAA+BH,sBAA/B;AACAE,sBAAc,CAACxB,SAAf,GAA2B,KAAKyB,uBAAhC;AACJ,OAHA,MAGO,IAAIF,QAAO,KAAM,sBAAjB,EAAyC;AAC5C,aAAKG,uBAAL,GAA+BJ,sBAA/B;AACAE,sBAAc,CAACxB,SAAf,GAA2B,KAAKyB,uBAAhC;AACJ;AACH,KATI;;AAWLE,gBAAY,CAACC,QAAD,EAAW;AACnB;AACA;AACAC,aAAO,CAACC,GAAR,CAAY,sBAAZ;AACAF,cAAQ;AACZ;;AAhBK;AAzKE,CAAf","names":["GenericCRUD","PedidoService","components","data","crudColumns","title","field","pathListDatatable","editedRow","id","estado","productos","precioTotal","direccionEnvio","metodoDePago","numSeguimiento","fechaCreacion","Date","observaciones","esPedidoCaro","header","crudInputs","label","value","component","crudButtons","onClick","icon","className","beforeCreate","pedidoService","methods","onElementosDialogSeleccionados","elementosSeleccionados","idDialog","localEditedRow","selectedPedidoosUnoList","selectedPedidoosDosList","beforeInsert","callback","console","log"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD @elementosSeleccionados=\"onElementosDialogSeleccionados\" :columns=\"crudColumns\"\r\n            :pathListDatatable=\"pathListDatatable\" :beforeInsert=\"beforeInsert\" :editedRow=\"editedRow\" :header=\"header\"\r\n            :crudInputs=\"crudInputs\" :crudButtons=\"crudButtons\" :service=\"pedidoService\">\r\n        </GenericCRUD>\r\n\r\n    </div>\r\n    <p_toast></p_toast>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\nimport PedidoService from '@/service/PedidoService';\r\n\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD,\r\n\r\n    },\r\n    data() {\r\n        /*\r\n        const options = [\r\n            { label: \"Opción 1\", value: \"opcion1\" },\r\n            { label: \"Opción 2\", value: \"opcion2\" },\r\n            { label: \"Opción 3\", value: \"opcion3\" },\r\n            { label: \"Opción 4\", value: \"opcion4\" },\r\n        ];*/\r\n        return {\r\n\r\n            /************  Datatatble  ******************/\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Nº de seguimiento', field: 'numSeguimiento' },\r\n                { title: 'Método de pago', field: 'metodoDePago' },\r\n                { title: 'Estado', field: 'estado.nombre' },\r\n                { title: 'Precio total', field: 'precioTotal' },\r\n                { title: 'Dirección de envío', field: 'direccionEnvio' },\r\n                { title: 'Observaciones', field: 'observaciones' },\r\n            ],\r\n            pathListDatatable: 'api/pedido/',\r\n            editedRow: {\r\n                id: null,\r\n                estado: null,\r\n                productos: [],\r\n                precioTotal: null,\r\n                direccionEnvio: null,\r\n                metodoDePago: null,\r\n                numSeguimiento: null,\r\n                fechaCreacion: new Date(),\r\n                observaciones: null,\r\n                esPedidoCaro: null\r\n            },\r\n            header: \"Lista de Pedidos\",\r\n\r\n            /************  Panel inputs  ******************/\r\n            crudInputs: [\r\n               \r\n                {\r\n                    label: 'Pedido caro',\r\n                    value: 'esPedidoCaro',\r\n                    component: 'p:triStateCheckbox'\r\n                },\r\n\r\n\r\n            ],\r\n            /************  Botones  ******************/\r\n            crudButtons: [\r\n                {\r\n                    label: 'Nuevo',\r\n                    onClick: \"create\",\r\n                    icon: 'pi pi-plus',\r\n                    className: 'p-button-success mr-2',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Guardar',\r\n                    onClick: \"save\",\r\n                    icon: 'pi pi-save',\r\n                    className: '',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Eliminar',\r\n                    onClick: \"remove\",\r\n                    icon: 'pi pi-trash',\r\n                    className: 'p-button-danger',\r\n                    component: 'p:commandButton',\r\n                },\r\n\r\n            ],\r\n            /*\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'email', component: 'p:inputText' },\r\n                //selectOneMenu proporcionando lista directamente como variable en el cuerpo de data\r\n                {\r\n                    label: 'Estado con lista como variable',\r\n                    value: 'estadoUno',\r\n                    component: 'p:selectOneMenu',\r\n                    options\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista directamente\r\n\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estadoDos',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona un producto',\r\n                    value: 'producto',\r\n                    customValue: true,\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona varios productos',\r\n                    value: 'productos',\r\n                    component: 'p:selectCheckBoxMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n                {\r\n                    label: 'En stock',\r\n                    value: 'checkBox',\r\n                    component: 'p:triStateCheckbox'\r\n                },\r\n                {\r\n                    id: 'idDialogproductosUno',\r\n                    label: 'Selecciona productos uno',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos uno',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                },\r\n                {\r\n                    id: 'idDialogproductosDos',\r\n                    label: 'Selecciona otros productos dos',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos dos',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                }\r\n            ]*/\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    },\r\n    beforeCreate() {\r\n        this.pedidoService = new PedidoService();\r\n\r\n\r\n    },\r\n\r\n    methods: {\r\n        onElementosDialogSeleccionados(elementosSeleccionados, idDialog, localEditedRow) {\r\n            if (idDialog === 'idDialogproductosUno') {\r\n                this.selectedPedidoosUnoList = elementosSeleccionados;\r\n                localEditedRow.productos = this.selectedPedidoosUnoList;\r\n            } else if (idDialog === 'idDialogproductosDos') {\r\n                this.selectedPedidoosDosList = elementosSeleccionados;\r\n                localEditedRow.productos = this.selectedPedidoosUnoList;\r\n            }\r\n        },\r\n\r\n        beforeInsert(callback) {\r\n            // aquí se hace todo el proceso previo al guardado\r\n            // cuando termine, se llama a la función de callback\r\n            console.log('BeforeSave del padre');\r\n            callback();\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}