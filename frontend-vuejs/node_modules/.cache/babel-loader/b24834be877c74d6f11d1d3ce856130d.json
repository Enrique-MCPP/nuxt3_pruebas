{"ast":null,"code":"import { createDecorator } from 'vue-class-component';\n\n// Declare Log decorator.\nexport const RowSelect = createDecorator((options, key) => {\n  // Keep the original method for later.\n  const originalMethod = options.methods[key];\n\n  // Wrap the method with the logging logic.\n  options.methods[key] = function wrapperMethod(...args) {\n    // Print a log.\n    console.log(`Invoked: ${key}(`, ...args, ')');\n\n    // Invoke the original method.\n    originalMethod.apply(this, args);\n  };\n});","map":{"version":3,"names":["createDecorator","RowSelect","options","key","originalMethod","methods","wrapperMethod","args","console","log","apply"],"sources":["C:/Users/emalc/OneDrive/Escritorio/CRUD_keycloak_primeVue/keycloak-workshop/frontend-vuejs/src/decoradores/decorators.js"],"sourcesContent":["import { createDecorator } from 'vue-class-component'\r\n\r\n// Declare Log decorator.\r\nexport const RowSelect = createDecorator((options, key) => {\r\n  // Keep the original method for later.\r\n  const originalMethod = options.methods[key]\r\n\r\n  // Wrap the method with the logging logic.\r\n  options.methods[key] = function wrapperMethod(...args) {\r\n    // Print a log.\r\n    console.log(`Invoked: ${key}(`, ...args, ')')\r\n\r\n    // Invoke the original method.\r\n    originalMethod.apply(this, args)\r\n  }\r\n})"],"mappings":"AAAA,SAASA,eAAe,QAAQ,qBAAqB;;AAErD;AACA,OAAO,MAAMC,SAAS,GAAGD,eAAe,CAAC,CAACE,OAAO,EAAEC,GAAG,KAAK;EACzD;EACA,MAAMC,cAAc,GAAGF,OAAO,CAACG,OAAO,CAACF,GAAG,CAAC;;EAE3C;EACAD,OAAO,CAACG,OAAO,CAACF,GAAG,CAAC,GAAG,SAASG,aAAaA,CAAC,GAAGC,IAAI,EAAE;IACrD;IACAC,OAAO,CAACC,GAAG,CAAE,YAAWN,GAAI,GAAE,EAAE,GAAGI,IAAI,EAAE,GAAG,CAAC;;IAE7C;IACAH,cAAc,CAACM,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;EAClC,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module"}