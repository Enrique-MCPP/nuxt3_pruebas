{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GenericCRUD = _resolveComponent(\"GenericCRUD\");\n\n  const _component_p_toast = _resolveComponent(\"p_toast\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createVNode(_component_GenericCRUD, {\n    onElementosSeleccionados: $options.onElementosDialogSeleccionados,\n    columns: $data.crudColumns,\n    data: $data.crudData,\n    beforeSave: $options.beforeSave,\n    editedRow: $data.editedRow,\n    header: $data.header,\n    crudInputs: $data.crudInputs,\n    selectedProduct: $data.selectedProduct,\n    crudButtons: $data.crudButtons,\n    service: _ctx.pedidoService\n  }, null, 8\n  /* PROPS */\n  , [\"onElementosSeleccionados\", \"columns\", \"data\", \"beforeSave\", \"editedRow\", \"header\", \"crudInputs\", \"selectedProduct\", \"crudButtons\", \"service\"])]), _createElementVNode(\"div\", null, \"Productos seleccionados uno: \" + _toDisplayString($data.selectedProductosUnoList), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", null, \"Productos seleccionados dos: \" + _toDisplayString($data.selectedProductosDosList), 1\n  /* TEXT */\n  ), _createVNode(_component_p_toast)], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;;6DACIA,oBAMM,KANN,EAMM,IANN,EAMM,CALFC,aAGcC,sBAHd,EAGc;AAHAC,4BAAsB,EAAEC,uCAGxB;AAHyDC,WAAO,EAAEC,iBAGlE;AAHgFC,QAAI,EAAED,cAGtF;AAFTE,cAAU,EAAEJ,mBAEH;AAFgBK,aAAS,EAAEH,eAE3B;AAFuCI,UAAM,EAAEJ,YAE/C;AAFwDK,cAAU,EAAEL,gBAEpE;AADTM,mBAAe,EAAEN,qBACR;AAD0BO,eAAW,EAAEP,iBACvC;AADqDQ,WAAO,EAAEC;AAC9D,GAHd;;AAAA,oJAKE,CANN,GAOAf,oBAAsE,KAAtE,EAAsE,IAAtE,EAAK,kCAA6BgB,iBAAGV,8BAAH,CAAlC,EAA6D;AAAA;AAA7D,KACAN,oBAAsE,KAAtE,EAAsE,IAAtE,EAAK,kCAA6BgB,iBAAGV,8BAAH,CAAlC,EAA6D;AAAA;AAA7D,KACAL,aAAmBgB,kBAAnB","names":["_createElementVNode","_createVNode","_component_GenericCRUD","onElementosSeleccionados","$options","columns","$data","data","beforeSave","editedRow","header","crudInputs","selectedProduct","crudButtons","service","_ctx","_toDisplayString","_component_p_toast"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD @elementosSeleccionados=\"onElementosDialogSeleccionados\" :columns=\"crudColumns\" :data=\"crudData\"\r\n            :beforeSave=\"beforeSave\" :editedRow=\"editedRow\" :header=\"header\" :crudInputs=\"crudInputs\"\r\n            :selectedProduct=\"selectedProduct\" :crudButtons=\"crudButtons\" :service=\"pedidoService\">\r\n        </GenericCRUD>\r\n\r\n    </div>\r\n    <div>Productos seleccionados uno: {{ selectedProductosUnoList }}</div>\r\n    <div>Productos seleccionados dos: {{ selectedProductosDosList }}</div>\r\n    <p_toast></p_toast>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\nimport PedidoService from '@/service/PedidoService';\r\n\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD,\r\n\r\n    },\r\n    data() {\r\n        /*\r\n        const options = [\r\n            { label: \"Opción 1\", value: \"opcion1\" },\r\n            { label: \"Opción 2\", value: \"opcion2\" },\r\n            { label: \"Opción 3\", value: \"opcion3\" },\r\n            { label: \"Opción 4\", value: \"opcion4\" },\r\n        ];*/\r\n        return {\r\n\r\n            selectedProduct: null,\r\n            selectedProductosUnoList: [],\r\n            selectedProductosDosList: [],\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Email', field: 'email' }\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: 'John Doe', email: 'johndoe@example.com' },\r\n                { id: 2, name: 'Jane Doe', email: 'janedoe@example.com' }\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                estado: null,\r\n                productos: null,\r\n                precioTotal: null,\r\n                direccionEnvio: null,\r\n                metodoDePago: null,\r\n                numSeguimiento: null,\r\n                observaciones: null,\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: 'Nº de seguimiento', value: 'numSeguimiento', component: 'p:inputText' },\r\n                {\r\n                    label: 'Método de pago',\r\n                    value: 'metodoDePago',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Paypal', value: 'Paypal' },\r\n                        { label: 'Bizum', value: 'Bizum' },\r\n                        { label: 'Tarje de crédito', value: 'Tarjeta de crédito' },\r\n                    ],\r\n\r\n                },\r\n                {\r\n                    id: 'idEstado',\r\n                    label: 'Selecciona un estado',\r\n                    value: 'estado',\r\n                    customValue: true,\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/estado/\"\r\n\r\n                },\r\n                {\r\n                    id: 'idDialogproductosUno',\r\n                    label: 'Selecciona productos uno',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos uno',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                },\r\n                { label: 'Dirección de envío', value: 'direccionEnvio', component: 'p:inputText' },\r\n                { label: 'Precio total', value: 'precioTotal', component: 'p:inputText' },\r\n                { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n            ],\r\n            /*\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'email', component: 'p:inputText' },\r\n                //selectOneMenu proporcionando lista directamente como variable en el cuerpo de data\r\n                {\r\n                    label: 'Estado con lista como variable',\r\n                    value: 'estadoUno',\r\n                    component: 'p:selectOneMenu',\r\n                    options\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista directamente\r\n\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estadoDos',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona un producto',\r\n                    value: 'producto',\r\n                    customValue: true,\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona varios productos',\r\n                    value: 'productos',\r\n                    component: 'p:selectCheckBoxMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n                {\r\n                    label: 'En stock',\r\n                    value: 'checkBox',\r\n                    component: 'p:triStateCheckbox'\r\n                },\r\n                {\r\n                    id: 'idDialogproductosUno',\r\n                    label: 'Selecciona productos uno',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos uno',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                },\r\n                {\r\n                    id: 'idDialogproductosDos',\r\n                    label: 'Selecciona otros productos dos',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos dos',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                }\r\n            ]*/\r\n            crudButtons: [\r\n                {\r\n                    label: 'Nuevo',\r\n                    onClick: \"create\",\r\n                    icon: 'pi pi-plus',\r\n                    className: 'p-button-success mr-2',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Guardar',\r\n                    onClick: \"save\",\r\n                    icon: 'pi pi-save',\r\n                    className: '',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Eliminar',\r\n                    onClick: \"remove\",\r\n                    icon: 'pi pi-trash',\r\n                    className: 'p-button-danger',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Refrescar',\r\n                    onClick: \"getAll\",\r\n                    icon: 'pi pi-refresh',\r\n                    className: 'p-button-danger',\r\n                    component: 'p:commandButton',\r\n                },\r\n            ],\r\n\r\n\r\n        }\r\n\r\n\r\n    },\r\n    beforeCreate() {\r\n        this.pedidoService = new PedidoService();\r\n    },\r\n    methods: {\r\n        onElementosDialogSeleccionados(elementosSeleccionados, idDialog) {\r\n            if (idDialog === 'idDialogproductosUno') {\r\n                this.selectedProductosUnoList = elementosSeleccionados;\r\n            } else if (idDialog === 'idDialogproductosDos') {\r\n                this.selectedProductosDosList = elementosSeleccionados;\r\n            }\r\n\r\n        },\r\n        beforeSave(callback) {\r\n            // aquí se hace todo el proceso previo al guardado\r\n            // cuando termine, se llama a la función de callback\r\n            console.log('BeforeSave del padre');\r\n            callback();\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}