{"ast":null,"code":"import Button from 'primevue/button';\nimport InputText from 'primevue/inputtext';\nimport { DomHandler } from 'primevue/utils';\nimport { resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, mergeProps, toHandlers, createCommentVNode, createBlock } from 'vue';\nvar script = {\n  name: 'InputNumber',\n  emits: ['update:modelValue', 'input', 'focus', 'blur'],\n  props: {\n    modelValue: {\n      type: Number,\n      default: null\n    },\n    format: {\n      type: Boolean,\n      default: true\n    },\n    showButtons: {\n      type: Boolean,\n      default: false\n    },\n    buttonLayout: {\n      type: String,\n      default: 'stacked'\n    },\n    incrementButtonClass: {\n      type: String,\n      default: null\n    },\n    decrementButtonClass: {\n      type: String,\n      default: null\n    },\n    incrementButtonIcon: {\n      type: String,\n      default: 'pi pi-angle-up'\n    },\n    decrementButtonIcon: {\n      type: String,\n      default: 'pi pi-angle-down'\n    },\n    locale: {\n      type: String,\n      default: undefined\n    },\n    localeMatcher: {\n      type: String,\n      default: undefined\n    },\n    mode: {\n      type: String,\n      default: 'decimal'\n    },\n    prefix: {\n      type: String,\n      default: null\n    },\n    suffix: {\n      type: String,\n      default: null\n    },\n    currency: {\n      type: String,\n      default: undefined\n    },\n    currencyDisplay: {\n      type: String,\n      default: undefined\n    },\n    useGrouping: {\n      type: Boolean,\n      default: true\n    },\n    minFractionDigits: {\n      type: Number,\n      default: undefined\n    },\n    maxFractionDigits: {\n      type: Number,\n      default: undefined\n    },\n    min: {\n      type: Number,\n      default: null\n    },\n    max: {\n      type: Number,\n      default: null\n    },\n    step: {\n      type: Number,\n      default: 1\n    },\n    allowEmpty: {\n      type: Boolean,\n      default: true\n    },\n    highlightOnFocus: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    placeholder: {\n      type: String,\n      default: null\n    },\n    inputId: {\n      type: String,\n      default: null\n    },\n    inputClass: {\n      type: String,\n      default: null\n    },\n    inputStyle: {\n      type: null,\n      default: null\n    },\n    inputProps: {\n      type: null,\n      default: null\n    },\n    incrementButtonProps: {\n      type: null,\n      default: null\n    },\n    decrementButtonProps: {\n      type: null,\n      default: null\n    },\n    'aria-labelledby': {\n      type: String,\n      default: null\n    },\n    'aria-label': {\n      type: String,\n      default: null\n    }\n  },\n  numberFormat: null,\n  _numeral: null,\n  _decimal: null,\n  _group: null,\n  _minusSign: null,\n  _currency: null,\n  _suffix: null,\n  _prefix: null,\n  _index: null,\n  groupChar: '',\n  isSpecialChar: null,\n  prefixChar: null,\n  suffixChar: null,\n  timer: null,\n\n  data() {\n    return {\n      d_modelValue: this.modelValue,\n      focused: false\n    };\n  },\n\n  watch: {\n    modelValue(newValue) {\n      this.d_modelValue = newValue;\n    },\n\n    locale(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    localeMatcher(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    mode(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    currency(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    currencyDisplay(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    useGrouping(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    minFractionDigits(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    maxFractionDigits(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    suffix(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n\n    prefix(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    }\n\n  },\n\n  created() {\n    this.constructParser();\n  },\n\n  methods: {\n    getOptions() {\n      return {\n        localeMatcher: this.localeMatcher,\n        style: this.mode,\n        currency: this.currency,\n        currencyDisplay: this.currencyDisplay,\n        useGrouping: this.useGrouping,\n        minimumFractionDigits: this.minFractionDigits,\n        maximumFractionDigits: this.maxFractionDigits\n      };\n    },\n\n    constructParser() {\n      this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n      const numerals = [...new Intl.NumberFormat(this.locale, {\n        useGrouping: false\n      }).format(9876543210)].reverse();\n      const index = new Map(numerals.map((d, i) => [d, i]));\n      this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n      this._group = this.getGroupingExpression();\n      this._minusSign = this.getMinusSignExpression();\n      this._currency = this.getCurrencyExpression();\n      this._decimal = this.getDecimalExpression();\n      this._suffix = this.getSuffixExpression();\n      this._prefix = this.getPrefixExpression();\n\n      this._index = d => index.get(d);\n    },\n\n    updateConstructParser(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.constructParser();\n      }\n    },\n\n    escapeRegExp(text) {\n      return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    },\n\n    getDecimalExpression() {\n      const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(),\n        useGrouping: false\n      });\n      return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n    },\n\n    getGroupingExpression() {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        useGrouping: true\n      });\n      this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n      return new RegExp(`[${this.groupChar}]`, 'g');\n    },\n\n    getMinusSignExpression() {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        useGrouping: false\n      });\n      return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    },\n\n    getCurrencyExpression() {\n      if (this.currency) {\n        const formatter = new Intl.NumberFormat(this.locale, {\n          style: 'currency',\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        });\n        return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n      }\n\n      return new RegExp(`[]`, 'g');\n    },\n\n    getPrefixExpression() {\n      if (this.prefix) {\n        this.prefixChar = this.prefix;\n      } else {\n        const formatter = new Intl.NumberFormat(this.locale, {\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay\n        });\n        this.prefixChar = formatter.format(1).split('1')[0];\n      }\n\n      return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n    },\n\n    getSuffixExpression() {\n      if (this.suffix) {\n        this.suffixChar = this.suffix;\n      } else {\n        const formatter = new Intl.NumberFormat(this.locale, {\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        });\n        this.suffixChar = formatter.format(1).split('1')[1];\n      }\n\n      return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n    },\n\n    formatValue(value) {\n      if (value != null) {\n        if (value === '-') {\n          // Minus sign\n          return value;\n        }\n\n        if (this.format) {\n          let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n          let formattedValue = formatter.format(value);\n\n          if (this.prefix) {\n            formattedValue = this.prefix + formattedValue;\n          }\n\n          if (this.suffix) {\n            formattedValue = formattedValue + this.suffix;\n          }\n\n          return formattedValue;\n        }\n\n        return value.toString();\n      }\n\n      return '';\n    },\n\n    parseValue(text) {\n      let filteredText = text.replace(this._suffix, '').replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '').replace(this._group, '').replace(this._minusSign, '-').replace(this._decimal, '.').replace(this._numeral, this._index);\n\n      if (filteredText) {\n        if (filteredText === '-') // Minus sign\n          return filteredText;\n        let parsedValue = +filteredText;\n        return isNaN(parsedValue) ? null : parsedValue;\n      }\n\n      return null;\n    },\n\n    repeat(event, interval, dir) {\n      if (this.readonly) {\n        return;\n      }\n\n      let i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(() => {\n        this.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    },\n\n    spin(event, dir) {\n      if (this.$refs.input) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    },\n\n    onUpButtonMouseDown(event) {\n      if (!this.disabled) {\n        this.$refs.input.$el.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n      }\n    },\n\n    onUpButtonMouseUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onUpButtonMouseLeave() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onUpButtonKeyUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onUpButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, 1);\n      }\n    },\n\n    onDownButtonMouseDown(event) {\n      if (!this.disabled) {\n        this.$refs.input.$el.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n      }\n    },\n\n    onDownButtonMouseUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onDownButtonMouseLeave() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onDownButtonKeyUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n\n    onDownButtonKeyDown(event) {\n      if (event.keyCode === 32 || event.keyCode === 13) {\n        this.repeat(event, null, -1);\n      }\n    },\n\n    onUserInput() {\n      if (this.isSpecialChar) {\n        this.$refs.input.$el.value = this.lastValue;\n      }\n\n      this.isSpecialChar = false;\n    },\n\n    onInputKeyDown(event) {\n      if (this.readonly) {\n        return;\n      }\n\n      this.lastValue = event.target.value;\n\n      if (event.shiftKey || event.altKey) {\n        this.isSpecialChar = true;\n        return;\n      }\n\n      let selectionStart = event.target.selectionStart;\n      let selectionEnd = event.target.selectionEnd;\n      let inputValue = event.target.value;\n      let newValueStr = null;\n\n      if (event.altKey) {\n        event.preventDefault();\n      }\n\n      switch (event.code) {\n        case 'ArrowUp':\n          this.spin(event, 1);\n          event.preventDefault();\n          break;\n\n        case 'ArrowDown':\n          this.spin(event, -1);\n          event.preventDefault();\n          break;\n\n        case 'ArrowLeft':\n          if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n            event.preventDefault();\n          }\n\n          break;\n\n        case 'ArrowRight':\n          if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n            event.preventDefault();\n          }\n\n          break;\n\n        case 'Tab':\n        case 'Enter':\n          newValueStr = this.validateValue(this.parseValue(inputValue));\n          this.$refs.input.$el.value = this.formatValue(newValueStr);\n          this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n          this.updateModel(event, newValueStr);\n          break;\n\n        case 'Backspace':\n          {\n            event.preventDefault();\n\n            if (selectionStart === selectionEnd) {\n              const deleteChar = inputValue.charAt(selectionStart - 1);\n              const {\n                decimalCharIndex,\n                decimalCharIndexWithoutPrefix\n              } = this.getDecimalCharIndexes(inputValue);\n\n              if (this.isNumeralChar(deleteChar)) {\n                const decimalLength = this.getDecimalLength(inputValue);\n\n                if (this._group.test(deleteChar)) {\n                  this._group.lastIndex = 0;\n                  newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                } else if (this._decimal.test(deleteChar)) {\n                  this._decimal.lastIndex = 0;\n\n                  if (decimalLength) {\n                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                  } else {\n                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                  }\n                } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                  const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                } else if (decimalCharIndexWithoutPrefix === 1) {\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                  newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                }\n              }\n\n              this.updateValue(event, newValueStr, null, 'delete-single');\n            } else {\n              newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n              this.updateValue(event, newValueStr, null, 'delete-range');\n            }\n\n            break;\n          }\n\n        case 'Delete':\n          event.preventDefault();\n\n          if (selectionStart === selectionEnd) {\n            const deleteChar = inputValue.charAt(selectionStart);\n            const {\n              decimalCharIndex,\n              decimalCharIndexWithoutPrefix\n            } = this.getDecimalCharIndexes(inputValue);\n\n            if (this.isNumeralChar(deleteChar)) {\n              const decimalLength = this.getDecimalLength(inputValue);\n\n              if (this._group.test(deleteChar)) {\n                this._group.lastIndex = 0;\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n              } else if (this._decimal.test(deleteChar)) {\n                this._decimal.lastIndex = 0;\n\n                if (decimalLength) {\n                  this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                }\n              } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n              } else if (decimalCharIndexWithoutPrefix === 1) {\n                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n              }\n            }\n\n            this.updateValue(event, newValueStr, null, 'delete-back-single');\n          } else {\n            newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, null, 'delete-range');\n          }\n\n          break;\n\n        case 'Home':\n          if (this.min) {\n            this.updateModel(event, this.min);\n            event.preventDefault();\n          }\n\n          break;\n\n        case 'End':\n          if (this.max) {\n            this.updateModel(event, this.max);\n            event.preventDefault();\n          }\n\n          break;\n      }\n    },\n\n    onInputKeyPress(event) {\n      if (this.readonly) {\n        return;\n      }\n\n      event.preventDefault();\n      let code = event.which || event.keyCode;\n      let char = String.fromCharCode(code);\n      const isDecimalSign = this.isDecimalSign(char);\n      const isMinusSign = this.isMinusSign(char);\n\n      if (48 <= code && code <= 57 || isMinusSign || isDecimalSign) {\n        this.insert(event, char, {\n          isDecimalSign,\n          isMinusSign\n        });\n      }\n    },\n\n    onPaste(event) {\n      event.preventDefault();\n      let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n      if (data) {\n        let filteredData = this.parseValue(data);\n\n        if (filteredData != null) {\n          this.insert(event, filteredData.toString());\n        }\n      }\n    },\n\n    allowMinusSign() {\n      return this.min === null || this.min < 0;\n    },\n\n    isMinusSign(char) {\n      if (this._minusSign.test(char) || char === '-') {\n        this._minusSign.lastIndex = 0;\n        return true;\n      }\n\n      return false;\n    },\n\n    isDecimalSign(char) {\n      if (this._decimal.test(char)) {\n        this._decimal.lastIndex = 0;\n        return true;\n      }\n\n      return false;\n    },\n\n    isDecimalMode() {\n      return this.mode === 'decimal';\n    },\n\n    getDecimalCharIndexes(val) {\n      let decimalCharIndex = val.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n      const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      return {\n        decimalCharIndex,\n        decimalCharIndexWithoutPrefix\n      };\n    },\n\n    getCharIndexes(val) {\n      const decimalCharIndex = val.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      const minusCharIndex = val.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n      const suffixCharIndex = val.search(this._suffix);\n      this._suffix.lastIndex = 0;\n      const currencyCharIndex = val.search(this._currency);\n      this._currency.lastIndex = 0;\n      return {\n        decimalCharIndex,\n        minusCharIndex,\n        suffixCharIndex,\n        currencyCharIndex\n      };\n    },\n\n    insert(event, text, sign = {\n      isDecimalSign: false,\n      isMinusSign: false\n    }) {\n      const minusCharIndexOnText = text.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n\n      if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n        return;\n      }\n\n      const selectionStart = this.$refs.input.$el.selectionStart;\n      const selectionEnd = this.$refs.input.$el.selectionEnd;\n      let inputValue = this.$refs.input.$el.value.trim();\n      const {\n        decimalCharIndex,\n        minusCharIndex,\n        suffixCharIndex,\n        currencyCharIndex\n      } = this.getCharIndexes(inputValue);\n      let newValueStr;\n\n      if (sign.isMinusSign) {\n        if (selectionStart === 0) {\n          newValueStr = inputValue;\n\n          if (minusCharIndex === -1 || selectionEnd !== 0) {\n            newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n          }\n\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else if (sign.isDecimalSign) {\n        if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n          this.updateValue(event, inputValue, text, 'insert');\n        } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else {\n        const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n          if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n            const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n            newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n            this.updateValue(event, newValueStr, text, operation);\n          }\n        } else {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, operation);\n        }\n      }\n    },\n\n    insertText(value, text, start, end) {\n      let textSplit = text === '.' ? text : text.split('.');\n\n      if (textSplit.length === 2) {\n        const decimalCharIndex = value.slice(start, end).search(this._decimal);\n        this._decimal.lastIndex = 0;\n        return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);\n      } else if (end - start === value.length) {\n        return this.formatValue(text);\n      } else if (start === 0) {\n        return text + value.slice(end);\n      } else if (end === value.length) {\n        return value.slice(0, start) + text;\n      } else {\n        return value.slice(0, start) + text + value.slice(end);\n      }\n    },\n\n    deleteRange(value, start, end) {\n      let newValueStr;\n      if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n      return newValueStr;\n    },\n\n    initCursor() {\n      let selectionStart = this.$refs.input.$el.selectionStart;\n      let inputValue = this.$refs.input.$el.value;\n      let valueLength = inputValue.length;\n      let index = null; // remove prefix\n\n      let prefixLength = (this.prefixChar || '').length;\n      inputValue = inputValue.replace(this._prefix, '');\n      selectionStart = selectionStart - prefixLength;\n      let char = inputValue.charAt(selectionStart);\n\n      if (this.isNumeralChar(char)) {\n        return selectionStart + prefixLength;\n      } //left\n\n\n      let i = selectionStart - 1;\n\n      while (i >= 0) {\n        char = inputValue.charAt(i);\n\n        if (this.isNumeralChar(char)) {\n          index = i + prefixLength;\n          break;\n        } else {\n          i--;\n        }\n      }\n\n      if (index !== null) {\n        this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n      } else {\n        i = selectionStart;\n\n        while (i < valueLength) {\n          char = inputValue.charAt(i);\n\n          if (this.isNumeralChar(char)) {\n            index = i + prefixLength;\n            break;\n          } else {\n            i++;\n          }\n        }\n\n        if (index !== null) {\n          this.$refs.input.$el.setSelectionRange(index, index);\n        }\n      }\n\n      return index || 0;\n    },\n\n    onInputClick() {\n      const currentValue = this.$refs.input.$el.value;\n\n      if (!this.readonly && currentValue !== DomHandler.getSelection()) {\n        this.initCursor();\n      }\n    },\n\n    isNumeralChar(char) {\n      if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n        this.resetRegex();\n        return true;\n      }\n\n      return false;\n    },\n\n    resetRegex() {\n      this._numeral.lastIndex = 0;\n      this._decimal.lastIndex = 0;\n      this._group.lastIndex = 0;\n      this._minusSign.lastIndex = 0;\n    },\n\n    updateValue(event, valueStr, insertedValueStr, operation) {\n      let currentValue = this.$refs.input.$el.value;\n      let newValue = null;\n\n      if (valueStr != null) {\n        newValue = this.parseValue(valueStr);\n        newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n        this.updateInput(newValue, insertedValueStr, operation, valueStr);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    },\n\n    handleOnInput(event, currentValue, newValue) {\n      if (this.isValueChanged(currentValue, newValue)) {\n        this.$emit('input', {\n          originalEvent: event,\n          value: newValue,\n          formattedValue: currentValue\n        });\n      }\n    },\n\n    isValueChanged(currentValue, newValue) {\n      if (newValue === null && currentValue !== null) {\n        return true;\n      }\n\n      if (newValue != null) {\n        let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n        return newValue !== parsedCurrentValue;\n      }\n\n      return false;\n    },\n\n    validateValue(value) {\n      if (value === '-' || value == null) {\n        return null;\n      }\n\n      if (this.min != null && value < this.min) {\n        return this.min;\n      }\n\n      if (this.max != null && value > this.max) {\n        return this.max;\n      }\n\n      return value;\n    },\n\n    updateInput(value, insertedValueStr, operation, valueStr) {\n      insertedValueStr = insertedValueStr || '';\n      let inputValue = this.$refs.input.$el.value;\n      let newValue = this.formatValue(value);\n      let currentLength = inputValue.length;\n\n      if (newValue !== valueStr) {\n        newValue = this.concatValues(newValue, valueStr);\n      }\n\n      if (currentLength === 0) {\n        this.$refs.input.$el.value = newValue;\n        this.$refs.input.$el.setSelectionRange(0, 0);\n        const index = this.initCursor();\n        const selectionEnd = index + insertedValueStr.length;\n        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n      } else {\n        let selectionStart = this.$refs.input.$el.selectionStart;\n        let selectionEnd = this.$refs.input.$el.selectionEnd;\n        this.$refs.input.$el.value = newValue;\n        let newLength = newValue.length;\n\n        if (operation === 'range-insert') {\n          const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n          const startValueStr = startValue !== null ? startValue.toString() : '';\n          const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n          const sRegex = new RegExp(startExpr, 'g');\n          sRegex.test(newValue);\n          const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n          const tRegex = new RegExp(tExpr, 'g');\n          tRegex.test(newValue.slice(sRegex.lastIndex));\n          selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else if (newLength === currentLength) {\n          if (operation === 'insert' || operation === 'delete-back-single') this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);else if (operation === 'delete-single') this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);else if (operation === 'delete-range' || operation === 'spin') this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else if (operation === 'delete-back-single') {\n          let prevChar = inputValue.charAt(selectionEnd - 1);\n          let nextChar = inputValue.charAt(selectionEnd);\n          let diff = currentLength - newLength;\n\n          let isGroupChar = this._group.test(nextChar);\n\n          if (isGroupChar && diff === 1) {\n            selectionEnd += 1;\n          } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n            selectionEnd += -1 * diff + 1;\n          }\n\n          this._group.lastIndex = 0;\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else if (inputValue === '-' && operation === 'insert') {\n          this.$refs.input.$el.setSelectionRange(0, 0);\n          const index = this.initCursor();\n          const selectionEnd = index + insertedValueStr.length + 1;\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        } else {\n          selectionEnd = selectionEnd + (newLength - currentLength);\n          this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n        }\n      }\n\n      this.$refs.input.$el.setAttribute('aria-valuenow', value);\n    },\n\n    concatValues(val1, val2) {\n      if (val1 && val2) {\n        let decimalCharIndex = val2.search(this._decimal);\n        this._decimal.lastIndex = 0;\n\n        if (this.suffixChar) {\n          return val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar;\n        } else {\n          return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n        }\n      }\n\n      return val1;\n    },\n\n    getDecimalLength(value) {\n      if (value) {\n        const valueSplit = value.split(this._decimal);\n\n        if (valueSplit.length === 2) {\n          return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n        }\n      }\n\n      return 0;\n    },\n\n    updateModel(event, value) {\n      this.d_modelValue = value;\n      this.$emit('update:modelValue', value);\n    },\n\n    onInputFocus(event) {\n      this.focused = true;\n\n      if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== DomHandler.getSelection() && this.highlightOnFocus) {\n        event.target.select();\n      }\n\n      this.$emit('focus', event);\n    },\n\n    onInputBlur(event) {\n      this.focused = false;\n      let input = event.target;\n      let newValue = this.validateValue(this.parseValue(input.value));\n      this.$emit('blur', {\n        originalEvent: event,\n        value: input.value\n      });\n      input.value = this.formatValue(newValue);\n      input.setAttribute('aria-valuenow', newValue);\n      this.updateModel(event, newValue);\n    },\n\n    clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    },\n\n    maxBoundry() {\n      return this.d_modelValue >= this.max;\n    },\n\n    minBoundry() {\n      return this.d_modelValue <= this.min;\n    }\n\n  },\n  computed: {\n    containerClass() {\n      return ['p-inputnumber p-component p-inputwrapper', {\n        'p-inputwrapper-filled': this.filled,\n        'p-inputwrapper-focus': this.focused,\n        'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n        'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n        'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'\n      }];\n    },\n\n    upButtonClass() {\n      return ['p-inputnumber-button p-inputnumber-button-up', this.incrementButtonClass, {\n        'p-disabled': this.showButtons && this.max !== null && this.maxBoundry()\n      }];\n    },\n\n    downButtonClass() {\n      return ['p-inputnumber-button p-inputnumber-button-down', this.decrementButtonClass, {\n        'p-disabled': this.showButtons && this.min !== null && this.minBoundry()\n      }];\n    },\n\n    filled() {\n      return this.modelValue != null && this.modelValue.toString().length > 0;\n    },\n\n    upButtonListeners() {\n      return {\n        mousedown: event => this.onUpButtonMouseDown(event),\n        mouseup: event => this.onUpButtonMouseUp(event),\n        mouseleave: event => this.onUpButtonMouseLeave(event),\n        keydown: event => this.onUpButtonKeyDown(event),\n        keyup: event => this.onUpButtonKeyUp(event)\n      };\n    },\n\n    downButtonListeners() {\n      return {\n        mousedown: event => this.onDownButtonMouseDown(event),\n        mouseup: event => this.onDownButtonMouseUp(event),\n        mouseleave: event => this.onDownButtonMouseLeave(event),\n        keydown: event => this.onDownButtonKeyDown(event),\n        keyup: event => this.onDownButtonKeyUp(event)\n      };\n    },\n\n    formattedValue() {\n      const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n      return this.formatValue(val);\n    },\n\n    getFormatter() {\n      return this.numberFormat;\n    }\n\n  },\n  components: {\n    INInputText: InputText,\n    INButton: Button\n  }\n};\nconst _hoisted_1 = {\n  key: 0,\n  class: \"p-inputnumber-button-group\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_INInputText = resolveComponent(\"INInputText\");\n\n  const _component_INButton = resolveComponent(\"INButton\");\n\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass($options.containerClass)\n  }, [createVNode(_component_INInputText, mergeProps({\n    ref: \"input\",\n    id: $props.inputId,\n    class: [\"p-inputnumber-input\", $props.inputClass],\n    role: \"spinbutton\",\n    style: $props.inputStyle,\n    value: $options.formattedValue,\n    \"aria-valuemin\": $props.min,\n    \"aria-valuemax\": $props.max,\n    \"aria-valuenow\": $props.modelValue,\n    disabled: $props.disabled,\n    readonly: $props.readonly,\n    placeholder: $props.placeholder,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    onInput: $options.onUserInput,\n    onKeydown: $options.onInputKeyDown,\n    onKeypress: $options.onInputKeyPress,\n    onPaste: $options.onPaste,\n    onClick: $options.onInputClick,\n    onFocus: $options.onInputFocus,\n    onBlur: $options.onInputBlur\n  }, $props.inputProps), null, 16, [\"id\", \"class\", \"style\", \"value\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"disabled\", \"readonly\", \"placeholder\", \"aria-labelledby\", \"aria-label\", \"onInput\", \"onKeydown\", \"onKeypress\", \"onPaste\", \"onClick\", \"onFocus\", \"onBlur\"]), $props.showButtons && $props.buttonLayout === 'stacked' ? (openBlock(), createElementBlock(\"span\", _hoisted_1, [createVNode(_component_INButton, mergeProps({\n    class: $options.upButtonClass,\n    icon: $props.incrementButtonIcon\n  }, toHandlers($options.upButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]), createVNode(_component_INButton, mergeProps({\n    class: $options.downButtonClass,\n    icon: $props.decrementButtonIcon\n  }, toHandlers($options.downButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])])) : createCommentVNode(\"\", true), $props.showButtons && $props.buttonLayout !== 'stacked' ? (openBlock(), createBlock(_component_INButton, mergeProps({\n    key: 1,\n    class: $options.upButtonClass,\n    icon: $props.incrementButtonIcon\n  }, toHandlers($options.upButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])) : createCommentVNode(\"\", true), $props.showButtons && $props.buttonLayout !== 'stacked' ? (openBlock(), createBlock(_component_INButton, mergeProps({\n    key: 2,\n    class: $options.downButtonClass,\n    icon: $props.decrementButtonIcon\n  }, toHandlers($options.downButtonListeners), {\n    disabled: $props.disabled,\n    tabindex: -1,\n    \"aria-hidden\": \"true\"\n  }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])) : createCommentVNode(\"\", true)], 2);\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"\\n.p-inputnumber {\\n    display: inline-flex;\\n}\\n.p-inputnumber-button {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    flex: 0 0 auto;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\\n    display: none;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-input {\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    border-bottom-left-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group {\\n    display: flex;\\n    flex-direction: column;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\\n    flex: 1 1 auto;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\\n    order: 3;\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-inputnumber-input {\\n    order: 2;\\n    border-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\\n    order: 1;\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-vertical {\\n    flex-direction: column;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\\n    order: 1;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    order: 2;\\n    border-radius: 0;\\n    text-align: center;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\\n    order: 3;\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-input {\\n    flex: 1 1 auto;\\n}\\n.p-fluid .p-inputnumber {\\n    width: 100%;\\n}\\n.p-fluid .p-inputnumber .p-inputnumber-input {\\n    width: 1%;\\n}\\n.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    width: 100%;\\n}\\n\";\nstyleInject(css_248z);\nscript.render = render;\nexport { script as default };","map":{"version":3,"sources":["C:/Users/emalc/OneDrive/Escritorio/CRUD_keycloak_primeVue/keycloak-workshop/frontend-vuejs/node_modules/primevue/inputnumber/inputnumber.esm.js"],"names":["Button","InputText","DomHandler","resolveComponent","openBlock","createElementBlock","normalizeClass","createVNode","mergeProps","toHandlers","createCommentVNode","createBlock","script","name","emits","props","modelValue","type","Number","default","format","Boolean","showButtons","buttonLayout","String","incrementButtonClass","decrementButtonClass","incrementButtonIcon","decrementButtonIcon","locale","undefined","localeMatcher","mode","prefix","suffix","currency","currencyDisplay","useGrouping","minFractionDigits","maxFractionDigits","min","max","step","allowEmpty","highlightOnFocus","readonly","disabled","placeholder","inputId","inputClass","inputStyle","inputProps","incrementButtonProps","decrementButtonProps","numberFormat","_numeral","_decimal","_group","_minusSign","_currency","_suffix","_prefix","_index","groupChar","isSpecialChar","prefixChar","suffixChar","timer","data","d_modelValue","focused","watch","newValue","oldValue","updateConstructParser","created","constructParser","methods","getOptions","style","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","numerals","reverse","index","Map","map","d","i","RegExp","join","getGroupingExpression","getMinusSignExpression","getCurrencyExpression","getDecimalExpression","getSuffixExpression","getPrefixExpression","get","escapeRegExp","text","replace","formatter","trim","charAt","split","formatValue","value","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","clearTimer","setTimeout","spin","$refs","input","currentValue","$el","validateValue","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyUp","onUpButtonKeyDown","keyCode","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","lastValue","onInputKeyDown","target","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","code","isNumeralChar","setAttribute","deleteChar","decimalCharIndex","decimalCharIndexWithoutPrefix","getDecimalCharIndexes","decimalLength","getDecimalLength","test","lastIndex","slice","setSelectionRange","insertedText","isDecimalMode","updateValue","deleteRange","onInputKeyPress","which","char","fromCharCode","isDecimalSign","isMinusSign","insert","onPaste","clipboardData","window","getData","filteredData","allowMinusSign","val","search","filteredVal","getCharIndexes","minusCharIndex","suffixCharIndex","currencyCharIndex","sign","minusCharIndexOnText","insertText","resolvedOptions","operation","length","charIndex","start","end","textSplit","initCursor","valueLength","prefixLength","onInputClick","getSelection","resetRegex","valueStr","insertedValueStr","isValueChanged","$emit","originalEvent","parsedCurrentValue","currentLength","concatValues","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","val1","val2","valueSplit","onInputFocus","select","onInputBlur","clearInterval","maxBoundry","minBoundry","computed","containerClass","filled","upButtonClass","downButtonClass","upButtonListeners","mousedown","mouseup","mouseleave","keydown","keyup","downButtonListeners","getFormatter","components","INInputText","INButton","_hoisted_1","key","class","render","_ctx","_cache","$props","$setup","$data","$options","_component_INInputText","_component_INButton","ref","id","role","ariaLabelledby","ariaLabel","onInput","onKeydown","onKeypress","onClick","onFocus","onBlur","icon","tabindex","styleInject","css","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","css_248z"],"mappings":"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","sourcesContent":["import Button from 'primevue/button';\nimport InputText from 'primevue/inputtext';\nimport { DomHandler } from 'primevue/utils';\nimport { resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, mergeProps, toHandlers, createCommentVNode, createBlock } from 'vue';\n\nvar script = {\n    name: 'InputNumber',\n    emits: ['update:modelValue', 'input', 'focus', 'blur'],\n    props: {\n        modelValue: {\n            type: Number,\n            default: null\n        },\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-up'\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-down'\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: String,\n            default: null\n        },\n        inputStyle: {\n            type: null,\n            default: null\n        },\n        inputProps: {\n            type: null,\n            default: null\n        },\n        incrementButtonProps: {\n            type: null,\n            default: null\n        },\n        decrementButtonProps: {\n            type: null,\n            default: null\n        },\n        'aria-labelledby': {\n            type: String,\n            default: null\n        },\n        'aria-label': {\n            type: String,\n            default: null\n        }\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_modelValue: this.modelValue,\n            focused: false\n        };\n    },\n    watch: {\n        modelValue(newValue) {\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0 });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0 });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            if (event.shiftKey || event.altKey) {\n                this.isSpecialChar = true;\n\n                return;\n            }\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            if (event.altKey) {\n                event.preventDefault();\n            }\n\n            switch (event.code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    if (this.min) {\n                        this.updateModel(event, this.min);\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'End':\n                    if (this.max) {\n                        this.updateModel(event, this.max);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            event.preventDefault();\n            let code = event.which || event.keyCode;\n            let char = String.fromCharCode(code);\n            const isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== DomHandler.getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    else if (operation === 'delete-single') this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    else if (operation === 'delete-range' || operation === 'spin') this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_modelValue = value;\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== DomHandler.getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_modelValue >= this.max;\n        },\n        minBoundry() {\n            return this.d_modelValue <= this.min;\n        }\n    },\n    computed: {\n        containerClass() {\n            return [\n                'p-inputnumber p-component p-inputwrapper',\n                {\n                    'p-inputwrapper-filled': this.filled,\n                    'p-inputwrapper-focus': this.focused,\n                    'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                    'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                    'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'\n                }\n            ];\n        },\n\n        upButtonClass() {\n            return [\n                'p-inputnumber-button p-inputnumber-button-up',\n                this.incrementButtonClass,\n                {\n                    'p-disabled': this.showButtons && this.max !== null && this.maxBoundry()\n                }\n            ];\n        },\n        downButtonClass() {\n            return [\n                'p-inputnumber-button p-inputnumber-button-down',\n                this.decrementButtonClass,\n                {\n                    'p-disabled': this.showButtons && this.min !== null && this.minBoundry()\n                }\n            ];\n        },\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        INInputText: InputText,\n        INButton: Button\n    }\n};\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"p-inputnumber-button-group\"\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_INInputText = resolveComponent(\"INInputText\");\n  const _component_INButton = resolveComponent(\"INButton\");\n\n  return (openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass($options.containerClass)\n  }, [\n    createVNode(_component_INInputText, mergeProps({\n      ref: \"input\",\n      id: $props.inputId,\n      class: [\"p-inputnumber-input\", $props.inputClass],\n      role: \"spinbutton\",\n      style: $props.inputStyle,\n      value: $options.formattedValue,\n      \"aria-valuemin\": $props.min,\n      \"aria-valuemax\": $props.max,\n      \"aria-valuenow\": $props.modelValue,\n      disabled: $props.disabled,\n      readonly: $props.readonly,\n      placeholder: $props.placeholder,\n      \"aria-labelledby\": _ctx.ariaLabelledby,\n      \"aria-label\": _ctx.ariaLabel,\n      onInput: $options.onUserInput,\n      onKeydown: $options.onInputKeyDown,\n      onKeypress: $options.onInputKeyPress,\n      onPaste: $options.onPaste,\n      onClick: $options.onInputClick,\n      onFocus: $options.onInputFocus,\n      onBlur: $options.onInputBlur\n    }, $props.inputProps), null, 16, [\"id\", \"class\", \"style\", \"value\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"disabled\", \"readonly\", \"placeholder\", \"aria-labelledby\", \"aria-label\", \"onInput\", \"onKeydown\", \"onKeypress\", \"onPaste\", \"onClick\", \"onFocus\", \"onBlur\"]),\n    ($props.showButtons && $props.buttonLayout === 'stacked')\n      ? (openBlock(), createElementBlock(\"span\", _hoisted_1, [\n          createVNode(_component_INButton, mergeProps({\n            class: $options.upButtonClass,\n            icon: $props.incrementButtonIcon\n          }, toHandlers($options.upButtonListeners), {\n            disabled: $props.disabled,\n            tabindex: -1,\n            \"aria-hidden\": \"true\"\n          }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]),\n          createVNode(_component_INButton, mergeProps({\n            class: $options.downButtonClass,\n            icon: $props.decrementButtonIcon\n          }, toHandlers($options.downButtonListeners), {\n            disabled: $props.disabled,\n            tabindex: -1,\n            \"aria-hidden\": \"true\"\n          }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"])\n        ]))\n      : createCommentVNode(\"\", true),\n    ($props.showButtons && $props.buttonLayout !== 'stacked')\n      ? (openBlock(), createBlock(_component_INButton, mergeProps({\n          key: 1,\n          class: $options.upButtonClass,\n          icon: $props.incrementButtonIcon\n        }, toHandlers($options.upButtonListeners), {\n          disabled: $props.disabled,\n          tabindex: -1,\n          \"aria-hidden\": \"true\"\n        }, $props.incrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]))\n      : createCommentVNode(\"\", true),\n    ($props.showButtons && $props.buttonLayout !== 'stacked')\n      ? (openBlock(), createBlock(_component_INButton, mergeProps({\n          key: 2,\n          class: $options.downButtonClass,\n          icon: $props.decrementButtonIcon\n        }, toHandlers($options.downButtonListeners), {\n          disabled: $props.disabled,\n          tabindex: -1,\n          \"aria-hidden\": \"true\"\n        }, $props.decrementButtonProps), null, 16, [\"class\", \"icon\", \"disabled\"]))\n      : createCommentVNode(\"\", true)\n  ], 2))\n}\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \"\\n.p-inputnumber {\\n    display: inline-flex;\\n}\\n.p-inputnumber-button {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    flex: 0 0 auto;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\\n    display: none;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-input {\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    border-bottom-left-radius: 0;\\n    padding: 0;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group {\\n    display: flex;\\n    flex-direction: column;\\n}\\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\\n    flex: 1 1 auto;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\\n    order: 3;\\n    border-top-left-radius: 0;\\n    border-bottom-left-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-inputnumber-input {\\n    order: 2;\\n    border-radius: 0;\\n}\\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\\n    order: 1;\\n    border-top-right-radius: 0;\\n    border-bottom-right-radius: 0;\\n}\\n.p-inputnumber-buttons-vertical {\\n    flex-direction: column;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\\n    order: 1;\\n    border-bottom-left-radius: 0;\\n    border-bottom-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    order: 2;\\n    border-radius: 0;\\n    text-align: center;\\n}\\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\\n    order: 3;\\n    border-top-left-radius: 0;\\n    border-top-right-radius: 0;\\n    width: 100%;\\n}\\n.p-inputnumber-input {\\n    flex: 1 1 auto;\\n}\\n.p-fluid .p-inputnumber {\\n    width: 100%;\\n}\\n.p-fluid .p-inputnumber .p-inputnumber-input {\\n    width: 1%;\\n}\\n.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\\n    width: 100%;\\n}\\n\";\nstyleInject(css_248z);\n\nscript.render = render;\n\nexport { script as default };\n"]},"metadata":{},"sourceType":"module"}