{"ast":null,"code":"import GenericCRUD from './GenericCRUD.vue';\nimport axios from \"axios\";\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    GenericCRUD\n  },\n  options: [],\n\n  data() {\n    return {\n      optionsData: [],\n      selectedProduct: null,\n      crudColumns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'Name',\n        field: 'name'\n      }, {\n        title: 'Email',\n        field: 'email'\n      }],\n      crudData: [{\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@example.com'\n      }, {\n        id: 2,\n        name: 'Jane Doe',\n        email: 'janedoe@example.com'\n      }],\n      editedRow: {\n        id: null,\n        name: null,\n        email: null\n      },\n      header: \"Lista de Personas\",\n      crudInputs: [{\n        label: 'Nombre',\n        value: 'name',\n        component: 'p:inputText'\n      }, {\n        label: 'Email',\n        value: 'email',\n        component: 'p:inputText'\n      }, //selectOneMenu proporcionando lista directamente\n      {\n        label: 'Estado',\n        value: 'estado',\n        component: 'p:selectOneMenu',\n        options: this.options\n      }, //selectOneMenu proporcionando lista directamente\n      {\n        label: 'Estado',\n        value: 'estado',\n        component: 'p:selectOneMenu',\n        options: [{\n          label: 'Opción 1',\n          value: 'opcion1'\n        }, {\n          label: 'Opción 2',\n          value: 'opcion2'\n        }, {\n          label: 'Opción 3',\n          value: 'opcion3'\n        }, {\n          label: 'Opción 4',\n          value: 'opcion4'\n        }]\n      }, //selectOneMenu proporcionando lista desde bbdd dando el path.\n      {\n        id: 'idProducto',\n        label: 'Producto',\n        value: 'producto',\n        component: 'p:selectOneMenu',\n        pathList: \"/api/product/\"\n      }, {\n        id: 'idProducto',\n        label: 'Producto',\n        value: 'producto',\n        component: 'p:selectOneMenu',\n        options\n      }]\n    };\n  },\n\n  computed: { ...mapGetters({\n      username: 'username',\n      keycloakToken: 'keycloakToken',\n      keycloakTokenParsed: 'keycloakTokenParsed',\n      axiosConfig: 'axiosConfig',\n      roles: 'roles'\n    })\n  },\n\n  async mounted() {\n    const response = await axios.get(\"/api/product/\", this.axiosConfig);\n    const parsedData = response.data;\n    this.options = parsedData.map(item => ({\n      label: item.nombre,\n      value: item\n    }));\n  }\n\n};","map":{"version":3,"mappings":"AASA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,eAAe;AACXC,YAAU,EAAE;AACRH;AADQ,GADD;AAIXI,SAAM,EAAI,EAJC;;AAKXC,MAAI,GAAG;AAEH,WAAO;AACHC,iBAAW,EAAE,EADV;AAGHC,qBAAe,EAAE,IAHd;AAIHC,iBAAW,EAAE,CACT;AAAEC,aAAK,EAAE,IAAT;AAAeC,aAAK,EAAE;AAAtB,OADS,EAET;AAAED,aAAK,EAAE,MAAT;AAAiBC,aAAK,EAAE;AAAxB,OAFS,EAGT;AAAED,aAAK,EAAE,OAAT;AAAkBC,aAAK,EAAE;AAAzB,OAHS,CAJV;AASHC,cAAQ,EAAE,CACN;AAAEC,UAAE,EAAE,CAAN;AAASC,YAAI,EAAE,UAAf;AAA2BC,aAAK,EAAE;AAAlC,OADM,EAEN;AAAEF,UAAE,EAAE,CAAN;AAASC,YAAI,EAAE,UAAf;AAA2BC,aAAK,EAAE;AAAlC,OAFM,CATP;AAaHC,eAAS,EAAE;AACPH,UAAE,EAAE,IADG;AAEPC,YAAI,EAAE,IAFC;AAGPC,aAAK,EAAE;AAHA,OAbR;AAkBHE,YAAM,EAAE,mBAlBL;AAwBHC,gBAAU,EAAE,CACR;AAAEC,aAAK,EAAE,QAAT;AAAmBC,aAAK,EAAE,MAA1B;AAAkCC,iBAAS,EAAE;AAA7C,OADQ,EAER;AAAEF,aAAK,EAAE,OAAT;AAAkBC,aAAK,EAAE,OAAzB;AAAkCC,iBAAS,EAAE;AAA7C,OAFQ,EAGR;AACA;AACIF,aAAK,EAAE,QADX;AAEIC,aAAK,EAAE,QAFX;AAGIC,iBAAS,EAAE,iBAHf;AAIIhB,eAAO,EAAE,KAAKA;AAJlB,OAJQ,EAWR;AAEA;AACIc,aAAK,EAAE,QADX;AAEIC,aAAK,EAAE,QAFX;AAGIC,iBAAS,EAAE,iBAHf;AAIIhB,eAAO,EAAE,CACL;AAAEc,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SADK,EAEL;AAAED,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SAFK,EAGL;AAAED,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SAHK,EAIL;AAAED,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SAJK;AAJb,OAbQ,EAyBR;AACA;AACIP,UAAE,EAAE,YADR;AAEIM,aAAK,EAAE,UAFX;AAGIC,aAAK,EAAE,UAHX;AAIIC,iBAAS,EAAE,iBAJf;AAKIC,gBAAQ,EAAE;AALd,OA1BQ,EAmCR;AACIT,UAAE,EAAE,YADR;AAEIM,aAAK,EAAE,UAFX;AAGIC,aAAK,EAAE,UAHX;AAIIC,iBAAS,EAAE,iBAJf;AAKIhB;AALJ,OAnCQ;AAxBT,KAAP;AAyEH,GAhFU;;AAiFXkB,UAAQ,EAAE,EACN,GAAGpB,UAAU,CAAC;AACVqB,cAAQ,EAAE,UADA;AAEVC,mBAAa,EAAE,eAFL;AAGVC,yBAAmB,EAAE,qBAHX;AAIVC,iBAAW,EAAE,aAJH;AAKVC,WAAK,EAAE;AALG,KAAD;AADP,GAjFC;;AA2FX,QAAMC,OAAN,GAAgB;AAEZ,UAAMC,QAAO,GAAI,MAAM5B,KAAK,CAAC6B,GAAN,CAAU,eAAV,EAA2B,KAAKJ,WAAhC,CAAvB;AACA,UAAMK,UAAS,GAAIF,QAAQ,CAACxB,IAA5B;AACA,SAAKD,OAAL,GAAe2B,UAAU,CAACC,GAAX,CAAgBC,IAAD,KAAW;AACrCf,WAAK,EAAEe,IAAI,CAACC,MADyB;AAErCf,WAAK,EAAEc;AAF8B,KAAX,CAAf,CAAf;AAKH;;AApGU,CAAf","names":["GenericCRUD","axios","mapGetters","components","options","data","optionsData","selectedProduct","crudColumns","title","field","crudData","id","name","email","editedRow","header","crudInputs","label","value","component","pathList","computed","username","keycloakToken","keycloakTokenParsed","axiosConfig","roles","mounted","response","get","parsedData","map","item","nombre"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD :columns=\"crudColumns\" :data=\"crudData\" :editedRow=\"editedRow\" :header=\"header\"\r\n            :crudInputs=\"crudInputs\"></GenericCRUD>\r\n\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\nimport axios from \"axios\";\r\nimport { mapGetters } from 'vuex';\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD\r\n    },\r\n    options : [],\r\n    data() {\r\n       \r\n        return {\r\n            optionsData: [],\r\n          \r\n            selectedProduct: null,\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Email', field: 'email' }\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: 'John Doe', email: 'johndoe@example.com' },\r\n                { id: 2, name: 'Jane Doe', email: 'janedoe@example.com' }\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                name: null,\r\n                email: null\r\n            },\r\n            header: \"Lista de Personas\",\r\n\r\n\r\n\r\n\r\n\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'email', component: 'p:inputText' },\r\n                //selectOneMenu proporcionando lista directamente\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estado',\r\n                    component: 'p:selectOneMenu',\r\n                    options: this.options,\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista directamente\r\n\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estado',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Producto',\r\n                    value: 'producto',\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Producto',\r\n                    value: 'producto',\r\n                    component: 'p:selectOneMenu',\r\n                    options\r\n\r\n                },\r\n\r\n            ]\r\n\r\n        }\r\n\r\n\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            username: 'username',\r\n            keycloakToken: 'keycloakToken',\r\n            keycloakTokenParsed: 'keycloakTokenParsed',\r\n            axiosConfig: 'axiosConfig',\r\n            roles: 'roles',\r\n        }),\r\n\r\n    },\r\n    async mounted() {\r\n\r\n        const response = await axios.get(\"/api/product/\", this.axiosConfig);\r\n        const parsedData = response.data;\r\n        this.options = parsedData.map((item) => ({\r\n            label: item.nombre,\r\n            value: item,\r\n        }));\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}