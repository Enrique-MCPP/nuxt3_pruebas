{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GenericCRUD = _resolveComponent(\"GenericCRUD\");\n\n  const _component_p_selectOneMenu = _resolveComponent(\"p-selectOneMenu\");\n\n  const _component_p_spinner = _resolveComponent(\"p-spinner\");\n\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_GenericCRUD, {\n    columns: $data.crudColumns,\n    data: $data.crudData,\n    editedRow: $data.editedRow,\n    header: $data.header,\n    crudInputs: $data.crudInputs\n  }, null, 8\n  /* PROPS */\n  , [\"columns\", \"data\", \"editedRow\", \"header\", \"crudInputs\"]), !$data.loading ? (_openBlock(), _createBlock(_component_p_selectOneMenu, {\n    key: 0,\n    modelValue: $data.selectedOption,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedOption = $event),\n    options: $data.optionsData,\n    optionLabel: $data.optionLabel,\n    optionValue: $data.optionValue\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\", \"options\", \"optionLabel\", \"optionValue\"])) : _createCommentVNode(\"v-if\", true), $data.loading ? (_openBlock(), _createBlock(_component_p_spinner, {\n    key: 1\n  })) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;;;;uBACIA,oBAMM,KANN,EAMM,IANN,EAMM,CALFC,aAC2CC,sBAD3C,EAC2C;AAD7BC,WAAO,EAAEC,iBACoB;AADNC,QAAI,EAAED,cACA;AADWE,aAAS,EAAEF,eACtB;AADkCG,UAAM,EAAEH,YAC1C;AAAtCI,cAAU,EAAEJ;AAA0B,GAD3C;;AAAA,6DAKE,GAHsBA,+BAAxBK,aACiDC,0BADjD,EACiD;UAAA;gBADPN,oBACO;+DADPA,uBAAcO,OACP;AADUC,WAAO,EAAER,iBACnB;AADiCS,eAAW,EAAET,iBAC9C;AAA5CU,eAAW,EAAEV;AAA+B,GADjD;;AAAA,iGAGE,EADeA,+BAAjBK,aAAsCM,oBAAtC,EAAsC;AAAAC;AAAA,GAAtC,sCACE,CANN","names":["_createElementBlock","_createVNode","_component_GenericCRUD","columns","$data","data","editedRow","header","crudInputs","_createBlock","_component_p_selectOneMenu","$event","options","optionLabel","optionValue","_component_p_spinner","key"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD :columns=\"crudColumns\" :data=\"crudData\" :editedRow=\"editedRow\" :header=\"header\"\r\n            :crudInputs=\"crudInputs\"></GenericCRUD>\r\n        <p-selectOneMenu v-if=\"!loading\" v-model=\"selectedOption\" :options=\"optionsData\" :optionLabel=\"optionLabel\"\r\n            :optionValue=\"optionValue\"></p-selectOneMenu>\r\n        <p-spinner v-if=\"loading\"></p-spinner>\r\n    </div>\r\n</template>\r\n<script>\r\nimport GenericCRUD from \"./GenericCRUD.vue\";\r\nimport { mapGetters } from \"vuex\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD,\r\n    },\r\n    data() {\r\n        return {\r\n            path: \"/api/product/\",\r\n            optionsData: [],\r\n            selectedOption: null,\r\n            optionLabel: \"label\",\r\n            optionValue: \"value\",\r\n            crudColumns: [\r\n                { title: \"ID\", field: \"id\" },\r\n                { title: \"Name\", field: \"name\" },\r\n                { title: \"Email\", field: \"email\" },\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: \"John Doe\", email: \"johndoe@example.com\" },\r\n                { id: 2, name: \"Jane Doe\", email: \"janedoe@example.com\" },\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                name: null,\r\n                email: null,\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: \"Nombre\", value: \"name\", component: \"p:inputText\" },\r\n                { label: \"Email\", value: \"email\", component: \"p:inputText\" },\r\n                {\r\n                    label: \"Estado\",\r\n                    value: \"estado\",\r\n                    component: \"p:selectOneMenu\",\r\n                    options: this.optionsData,\r\n                    optionLabel: \"label\",\r\n                    optionValue: \"value\",\r\n                },\r\n            ],\r\n            loading: true,\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            username: \"username\",\r\n            keycloakToken: \"keycloakToken\",\r\n            keycloakTokenParsed: \"keycloakTokenParsed\",\r\n            axiosConfig: \"axiosConfig\",\r\n            roles: \"roles\",\r\n        }),\r\n    },\r\n    methods: {\r\n        async getOptions() {\r\n            const response = await axios.get(this.path, this.axiosConfig);\r\n            const parsedData = response.data;\r\n            return parsedData.map((item) => ({\r\n                label: item.nombre,\r\n                value: item.id,\r\n            }));\r\n        },\r\n    },\r\n    async created() {\r\n        this.loading = true;\r\n        const optionsData = await this.getOptions();\r\n        this.optionsData = optionsData;\r\n        this.loading = false;\r\n    },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}