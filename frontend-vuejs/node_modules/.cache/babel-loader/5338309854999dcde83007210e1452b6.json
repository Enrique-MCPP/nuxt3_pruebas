{"ast":null,"code":"import GenericCRUD from \"./GenericCRUD.vue\";\nimport { mapGetters } from \"vuex\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    GenericCRUD\n  },\n\n  data() {\n    return {\n      path: \"/api/product/\",\n      optionsData: [],\n      selectedOption: null,\n      optionLabel: \"label\",\n      optionValue: \"value\",\n      crudColumns: [{\n        title: \"ID\",\n        field: \"id\"\n      }, {\n        title: \"Name\",\n        field: \"name\"\n      }, {\n        title: \"Email\",\n        field: \"email\"\n      }],\n      crudData: [{\n        id: 1,\n        name: \"John Doe\",\n        email: \"johndoe@example.com\"\n      }, {\n        id: 2,\n        name: \"Jane Doe\",\n        email: \"janedoe@example.com\"\n      }],\n      editedRow: {\n        id: null,\n        name: null,\n        email: null\n      },\n      header: \"Lista de Personas\",\n      crudInputs: [{\n        label: \"Nombre\",\n        value: \"name\",\n        component: \"p:inputText\"\n      }, {\n        label: \"Email\",\n        value: \"email\",\n        component: \"p:inputText\"\n      }, {\n        label: \"Estado\",\n        value: \"estado\",\n        component: \"p:selectOneMenu\",\n        options: this.optionsData,\n        optionLabel: \"label\",\n        optionValue: \"value\"\n      }],\n      loading: true\n    };\n  },\n\n  computed: { ...mapGetters({\n      username: \"username\",\n      keycloakToken: \"keycloakToken\",\n      keycloakTokenParsed: \"keycloakTokenParsed\",\n      axiosConfig: \"axiosConfig\",\n      roles: \"roles\"\n    })\n  },\n  methods: {\n    async getOptions() {\n      const response = await axios.get(this.path, this.axiosConfig);\n      const parsedData = response.data;\n      return parsedData.map(item => ({\n        label: item.nombre,\n        value: item.id\n      }));\n    }\n\n  },\n\n  async created() {\n    this.loading = true;\n    const optionsData = await this.getOptions();\n    this.optionsData = optionsData;\n    this.loading = false;\n  }\n\n};","map":{"version":3,"mappings":"AAUA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe;AACXC,YAAU,EAAE;AACRH;AADQ,GADD;;AAIXI,MAAI,GAAG;AACH,WAAO;AACHC,UAAI,EAAE,eADH;AAEHC,iBAAW,EAAE,EAFV;AAGHC,oBAAc,EAAE,IAHb;AAIHC,iBAAW,EAAE,OAJV;AAKHC,iBAAW,EAAE,OALV;AAMHC,iBAAW,EAAE,CACT;AAAEC,aAAK,EAAE,IAAT;AAAeC,aAAK,EAAE;AAAtB,OADS,EAET;AAAED,aAAK,EAAE,MAAT;AAAiBC,aAAK,EAAE;AAAxB,OAFS,EAGT;AAAED,aAAK,EAAE,OAAT;AAAkBC,aAAK,EAAE;AAAzB,OAHS,CANV;AAWHC,cAAQ,EAAE,CACN;AAAEC,UAAE,EAAE,CAAN;AAASC,YAAI,EAAE,UAAf;AAA2BC,aAAK,EAAE;AAAlC,OADM,EAEN;AAAEF,UAAE,EAAE,CAAN;AAASC,YAAI,EAAE,UAAf;AAA2BC,aAAK,EAAE;AAAlC,OAFM,CAXP;AAeHC,eAAS,EAAE;AACPH,UAAE,EAAE,IADG;AAEPC,YAAI,EAAE,IAFC;AAGPC,aAAK,EAAE;AAHA,OAfR;AAoBHE,YAAM,EAAE,mBApBL;AAqBHC,gBAAU,EAAE,CACR;AAAEC,aAAK,EAAE,QAAT;AAAmBC,aAAK,EAAE,MAA1B;AAAkCC,iBAAS,EAAE;AAA7C,OADQ,EAER;AAAEF,aAAK,EAAE,OAAT;AAAkBC,aAAK,EAAE,OAAzB;AAAkCC,iBAAS,EAAE;AAA7C,OAFQ,EAGR;AACIF,aAAK,EAAE,QADX;AAEIC,aAAK,EAAE,QAFX;AAGIC,iBAAS,EAAE,iBAHf;AAIIC,eAAO,EAAE,KAAKjB,WAJlB;AAKIE,mBAAW,EAAE,OALjB;AAMIC,mBAAW,EAAE;AANjB,OAHQ,CArBT;AAiCHe,aAAO,EAAE;AAjCN,KAAP;AAmCH,GAxCU;;AAyCXC,UAAQ,EAAE,EACN,GAAGxB,UAAU,CAAC;AACVyB,cAAQ,EAAE,UADA;AAEVC,mBAAa,EAAE,eAFL;AAGVC,yBAAmB,EAAE,qBAHX;AAIVC,iBAAW,EAAE,aAJH;AAKVC,WAAK,EAAE;AALG,KAAD;AADP,GAzCC;AAkDXC,SAAO,EAAE;AACL,UAAMC,UAAN,GAAmB;AACf,YAAMC,QAAO,GAAI,MAAM/B,KAAK,CAACgC,GAAN,CAAU,KAAK7B,IAAf,EAAqB,KAAKwB,WAA1B,CAAvB;AACA,YAAMM,UAAS,GAAIF,QAAQ,CAAC7B,IAA5B;AACA,aAAO+B,UAAU,CAACC,GAAX,CAAgBC,IAAD,KAAW;AAC7BjB,aAAK,EAAEiB,IAAI,CAACC,MADiB;AAE7BjB,aAAK,EAAEgB,IAAI,CAACvB;AAFiB,OAAX,CAAf,CAAP;AAIH;;AARI,GAlDE;;AA4DX,QAAMyB,OAAN,GAAgB;AACZ,SAAKf,OAAL,GAAe,IAAf;AACA,UAAMlB,WAAU,GAAI,MAAM,KAAK0B,UAAL,EAA1B;AACA,SAAK1B,WAAL,GAAmBA,WAAnB;AACA,SAAKkB,OAAL,GAAe,KAAf;AACH;;AAjEU,CAAf","names":["GenericCRUD","mapGetters","axios","components","data","path","optionsData","selectedOption","optionLabel","optionValue","crudColumns","title","field","crudData","id","name","email","editedRow","header","crudInputs","label","value","component","options","loading","computed","username","keycloakToken","keycloakTokenParsed","axiosConfig","roles","methods","getOptions","response","get","parsedData","map","item","nombre","created"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD :columns=\"crudColumns\" :data=\"crudData\" :editedRow=\"editedRow\" :header=\"header\"\r\n            :crudInputs=\"crudInputs\"></GenericCRUD>\r\n        <p-selectOneMenu v-if=\"!loading\" v-model=\"selectedOption\" :options=\"optionsData\" :optionLabel=\"optionLabel\"\r\n            :optionValue=\"optionValue\"></p-selectOneMenu>\r\n        <p-spinner v-if=\"loading\"></p-spinner>\r\n    </div>\r\n</template>\r\n<script>\r\nimport GenericCRUD from \"./GenericCRUD.vue\";\r\nimport { mapGetters } from \"vuex\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD,\r\n    },\r\n    data() {\r\n        return {\r\n            path: \"/api/product/\",\r\n            optionsData: [],\r\n            selectedOption: null,\r\n            optionLabel: \"label\",\r\n            optionValue: \"value\",\r\n            crudColumns: [\r\n                { title: \"ID\", field: \"id\" },\r\n                { title: \"Name\", field: \"name\" },\r\n                { title: \"Email\", field: \"email\" },\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: \"John Doe\", email: \"johndoe@example.com\" },\r\n                { id: 2, name: \"Jane Doe\", email: \"janedoe@example.com\" },\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                name: null,\r\n                email: null,\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: \"Nombre\", value: \"name\", component: \"p:inputText\" },\r\n                { label: \"Email\", value: \"email\", component: \"p:inputText\" },\r\n                {\r\n                    label: \"Estado\",\r\n                    value: \"estado\",\r\n                    component: \"p:selectOneMenu\",\r\n                    options: this.optionsData,\r\n                    optionLabel: \"label\",\r\n                    optionValue: \"value\",\r\n                },\r\n            ],\r\n            loading: true,\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            username: \"username\",\r\n            keycloakToken: \"keycloakToken\",\r\n            keycloakTokenParsed: \"keycloakTokenParsed\",\r\n            axiosConfig: \"axiosConfig\",\r\n            roles: \"roles\",\r\n        }),\r\n    },\r\n    methods: {\r\n        async getOptions() {\r\n            const response = await axios.get(this.path, this.axiosConfig);\r\n            const parsedData = response.data;\r\n            return parsedData.map((item) => ({\r\n                label: item.nombre,\r\n                value: item.id,\r\n            }));\r\n        },\r\n    },\r\n    async created() {\r\n        this.loading = true;\r\n        const optionsData = await this.getOptions();\r\n        this.optionsData = optionsData;\r\n        this.loading = false;\r\n    },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}