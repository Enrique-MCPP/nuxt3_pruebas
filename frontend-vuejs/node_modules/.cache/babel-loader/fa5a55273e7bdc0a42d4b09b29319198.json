{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"Logout\");\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_commandButton = _resolveComponent(\"commandButton\");\n  const _component_PedidosCRUD = _resolveComponent(\"PedidosCRUD\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"\\r\\n  <img alt=\\\"Vue logo\\\" src=\\\"./assets/logo.png\\\">\\r\\n  <h3>{{ 'username:' + username }}</h3>\\r\\n  <h1>Keycloak Token</h1>\\r\\n  <json-viewer :value=\\\"keycloakTokenParsed\\\" copyable boxed sort />\\r\\n  <h1>Backend Token</h1>\\r\\n  <BuTTon @click=\\\"getBackendTokenInfo\\\"> Auth Token Info</BuTTon>\\r\\n  <json-viewer :value=\\\"backendToken\\\" copyable boxed sort /> \"), _createElementVNode(\"h3\", null, _toDisplayString('Usuario: ' + _ctx.username), 1 /* TEXT */), _createElementVNode(\"h3\", null, _toDisplayString('Roles: ' + $options.filteredRoles().join(', ')), 1 /* TEXT */), _createVNode(_component_commandButton, {\n    onClick: $options.logout\n  }, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_PedidosCRUD)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_createElementVNode","_toDisplayString","_ctx","username","$options","filteredRoles","join","_createVNode","_component_commandButton","onClick","logout","_component_PedidosCRUD"],"sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\App.vue"],"sourcesContent":["\r\n<template>\r\n    <!--\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <h3>{{ 'username:' + username }}</h3>\r\n  <h1>Keycloak Token</h1>\r\n  <json-viewer :value=\"keycloakTokenParsed\" copyable boxed sort />\r\n  <h1>Backend Token</h1>\r\n  <BuTTon @click=\"getBackendTokenInfo\"> Auth Token Info</BuTTon>\r\n  <json-viewer :value=\"backendToken\" copyable boxed sort /> -->\r\n  <h3>{{ 'Usuario: ' + username }}</h3>\r\n  <h3>{{ 'Roles: ' + filteredRoles().join(', ') }}</h3>\r\n  <commandButton @click=\"logout\">Logout</commandButton>\r\n\r\n  <PedidosCRUD />\r\n</template>\r\n\r\n<script>\r\nimport { computed, defineComponent } from 'vue'\r\nimport { mapGetters } from 'vuex'\r\nimport PedidosCRUD from './componentes/PedidosCRUD.vue'\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n\r\n\r\n    PedidosCRUD,\r\n\r\n\r\n\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      backendToken: null,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      username: 'username',\r\n      keycloakToken: 'keycloakToken',\r\n      keycloakTokenParsed: 'keycloakTokenParsed',\r\n      roles: 'roles',\r\n    })\r\n  },\r\n  methods: {\r\n    logout() {\r\n      this.emitter.emit('keycloak-logout')\r\n    },\r\n    getBackendTokenInfo() {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${this.keycloakToken}`\r\n        }\r\n      }\r\n      this.axios.get(\"api/product/\", config).then((response) => {\r\n        this.backendToken = response.data\r\n      })\r\n    },\r\n    filteredRoles() {\r\n      return this.roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>"],"mappings":";iDAYiC,QAAM;;;;6DAVnCA,mBAAA,8WAO2D,EAC7DC,mBAAA,CAAqC,YAAAC,gBAAA,eAAhBC,IAAA,CAAAC,QAAQ,kBAC7BH,mBAAA,CAAqD,YAAAC,gBAAA,aAAlCG,QAAA,CAAAC,aAAa,GAAGC,IAAI,wBACvCC,YAAA,CAAqDC,wBAAA;IAArCC,OAAK,EAAEL,QAAA,CAAAM;EAAM;sBAAE,MAAM,C;;kCAErCH,YAAA,CAAeI,sBAAA,E"},"metadata":{},"sourceType":"module"}