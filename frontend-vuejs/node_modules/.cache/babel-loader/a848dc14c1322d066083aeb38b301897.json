{"ast":null,"code":"import GenericCRUD from './GenericCRUD.vue';\nimport { mapGetters } from 'vuex';\nimport axios from \"axios\";\nexport default {\n  components: {\n    GenericCRUD\n  },\n\n  data() {\n    return {\n      path: \"/api/product/\",\n      optionsData: [],\n      optiones: [],\n      crudColumns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'Name',\n        field: 'name'\n      }, {\n        title: 'Email',\n        field: 'email'\n      }],\n      crudData: [{\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@example.com'\n      }, {\n        id: 2,\n        name: 'Jane Doe',\n        email: 'janedoe@example.com'\n      }],\n      editedRow: {\n        id: null,\n        name: null,\n        email: null\n      },\n      header: \"Lista de Personas\",\n      crudInputs: [{\n        label: 'Nombre',\n        value: 'name',\n        component: 'p:inputText'\n      }, {\n        label: 'Email',\n        value: 'name',\n        component: 'p:inputText'\n      }, {\n        label: 'Estado',\n        value: 'estado',\n        component: 'p:selectOneMenu',\n        options: [{\n          label: 'Opción 1',\n          value: 'opcion1'\n        }, {\n          label: 'Opción 2',\n          value: 'opcion2'\n        }, {\n          label: 'Opción 3',\n          value: 'opcion3'\n        }, {\n          label: 'Opción 4',\n          value: 'opcion4'\n        }],\n        optionLabel: 'label',\n        optionValue: 'value'\n      }, {\n        id: 'idProducto',\n        label: 'Producto',\n        value: 'Producto',\n        component: 'p:selectOneMenu',\n        options: [],\n        // Inicialmente vacío\n        optionLabel: 'label',\n        optionValue: 'value'\n      }]\n    };\n  },\n\n  computed: { ...mapGetters({\n      username: 'username',\n      keycloakToken: 'keycloakToken',\n      keycloakTokenParsed: 'keycloakTokenParsed',\n      axiosConfig: 'axiosConfig',\n      roles: 'roles'\n    })\n  },\n  watch: {\n    optionsData(newVal) {\n      // Actualizar options en crudInputs\n      this.crudInputs = this.crudInputs.map(input => {\n        if (input.component === \"p:selectOneMenu\" && input.id === \"idProducto\") {\n          console.log('Hola crudInputs');\n          return { ...input,\n            options: newVal\n          };\n        } else {\n          return input;\n        }\n      });\n    }\n\n  },\n  methods: {\n    async getOptions() {\n      const response = await axios.get(this.path, this.axiosConfig);\n      const parsedData = response.data;\n      return parsedData.map(item => ({\n        label: item.nombre,\n        value: item.id\n      }));\n    }\n\n  },\n\n  async created() {\n    const response = await axios.get(this.path, this.axiosConfig);\n    const parsedData = response.data;\n    this.optionsData = parsedData.map(item => ({\n      label: item.nombre,\n      value: item.id\n    }));\n    console.log(this.optionsData);\n    this.optiones = [{\n      label: 'Opción 1',\n      value: 'opcion1'\n    }, {\n      label: 'Opción 2',\n      value: 'opcion2'\n    }, {\n      label: 'Opción 3',\n      value: 'opcion3'\n    }, {\n      label: 'Opción 4',\n      value: 'opcion4'\n    }];\n    console.log(this.optiones);\n  }\n\n};","map":{"version":3,"mappings":"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","names":["GenericCRUD","mapGetters","axios","components","data","path","optionsData","optiones","crudColumns","title","field","crudData","id","name","email","editedRow","header","crudInputs","label","value","component","options","optionLabel","optionValue","computed","username","keycloakToken","keycloakTokenParsed","axiosConfig","roles","watch","newVal","map","input","console","log","methods","getOptions","response","get","parsedData","item","nombre","created"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD :columns=\"crudColumns\" :data=\"crudData\" :editedRow=\"editedRow\" :header=\"header\"\r\n            :crudInputs=\"crudInputs\"></GenericCRUD>\r\n\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\nimport { mapGetters } from 'vuex';\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD\r\n    },\r\n    data() {\r\n        return {\r\n            path: \"/api/product/\",\r\n            optionsData: [],\r\n            optiones: [],\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Email', field: 'email' }\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: 'John Doe', email: 'johndoe@example.com' },\r\n                { id: 2, name: 'Jane Doe', email: 'janedoe@example.com' }\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                name: null,\r\n                email: null\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'name', component: 'p:inputText' },\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estado',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n                    optionLabel: 'label',\r\n                    optionValue: 'value'\r\n                },\r\n\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Producto',\r\n                    value: 'Producto',\r\n                    component: 'p:selectOneMenu',\r\n\r\n                    options: [], // Inicialmente vacío\r\n                    optionLabel: 'label',\r\n                    optionValue: 'value'\r\n                }\r\n            ]\r\n\r\n        }\r\n\r\n\r\n    },\r\n    computed: {\r\n        ...mapGetters({\r\n            username: 'username',\r\n            keycloakToken: 'keycloakToken',\r\n            keycloakTokenParsed: 'keycloakTokenParsed',\r\n            axiosConfig: 'axiosConfig',\r\n            roles: 'roles',\r\n        }),\r\n    },\r\n    watch: {\r\n        optionsData(newVal) {\r\n            // Actualizar options en crudInputs\r\n            this.crudInputs = this.crudInputs.map((input) => {\r\n                if (input.component === \"p:selectOneMenu\" && input.id === \"idProducto\") {\r\n                    console.log('Hola crudInputs')\r\n                    return {\r\n                        ...input,\r\n                        options: newVal,\r\n                    };\r\n                } else {\r\n                    return input;\r\n                }\r\n            });\r\n        },\r\n    },\r\n    methods: {\r\n        async getOptions() {\r\n            const response = await axios.get(this.path, this.axiosConfig);\r\n            const parsedData = response.data;\r\n            return parsedData.map((item) => ({\r\n                label: item.nombre,\r\n                value: item.id,\r\n            }));\r\n        }\r\n    },\r\n    async created() {\r\n        const response = await axios.get(this.path, this.axiosConfig);\r\n        const parsedData = response.data;\r\n        this.optionsData = parsedData.map((item) => ({\r\n            label: item.nombre,\r\n            value: item.id,\r\n        }));\r\n        console.log(this.optionsData);\r\n\r\n        this.optiones = [\r\n            { label: 'Opción 1', value: 'opcion1' },\r\n            { label: 'Opción 2', value: 'opcion2' },\r\n            { label: 'Opción 3', value: 'opcion3' },\r\n            { label: 'Opción 4', value: 'opcion4' }\r\n        ];\r\n\r\n        console.log(this.optiones);\r\n\r\n    },\r\n\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}