{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'App',\n  components: {},\n\n  data() {\n    return {\n      backendToken: null\n    };\n  },\n\n  computed: { ...mapGetters({\n      username: 'username',\n      keycloakToken: 'keycloakToken',\n      keycloakTokenParsed: 'keycloakTokenParsed',\n      roles: 'roles'\n    })\n  },\n  methods: {\n    logout() {\n      this.emitter.emit('keycloak-logout');\n    },\n\n    getBackendTokenInfo() {\n      const express = require('express');\n\n      const axios = require('axios');\n\n      const app = express();\n      app.get('/api/product', (req, res) => {\n        axios.get('http://localhost:9090/api/product/').then(response => {\n          res.send(response.data);\n        });\n      });\n      app.listen(3000, () => {\n        console.log('Server running on port 3000');\n      });\n    },\n\n    filteredRoles() {\n      return this.roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAqBA,SAASA,UAAT,QAA2B,MAA3B;AAIA,eAAe;AACbC,MAAI,EAAE,KADO;AAEbC,YAAU,EAAE,EAFC;;AAMbC,MAAI,GAAG;AACL,WAAO;AACLC,kBAAY,EAAE;AADT,KAAP;AAGD,GAVY;;AAWbC,UAAQ,EAAE,EACR,GAAGL,UAAU,CAAC;AACZM,cAAQ,EAAE,UADE;AAEZC,mBAAa,EAAE,eAFH;AAGZC,yBAAmB,EAAE,qBAHT;AAIZC,WAAK,EAAE;AAJK,KAAD;AADL,GAXG;AAmBbC,SAAO,EAAE;AACPC,UAAM,GAAG;AACP,WAAKC,OAAL,CAAaC,IAAb,CAAkB,iBAAlB;AACD,KAHM;;AAIPC,uBAAmB,GAAG;AACpB,YAAMC,OAAM,GAAIC,OAAO,CAAC,SAAD,CAAvB;;AACA,YAAMC,KAAI,GAAID,OAAO,CAAC,OAAD,CAArB;;AACA,YAAME,GAAE,GAAIH,OAAO,EAAnB;AAEAG,SAAG,CAACC,GAAJ,CAAQ,cAAR,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpCJ,aAAK,CAACE,GAAN,CAAU,oCAAV,EAAgDG,IAAhD,CAAqDC,QAAO,IAAK;AAC/DF,aAAG,CAACG,IAAJ,CAASD,QAAQ,CAACpB,IAAlB;AACD,SAFD;AAGD,OAJD;AAMAe,SAAG,CAACO,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrBC,eAAO,CAACC,GAAR,CAAY,6BAAZ;AACD,OAFD;AAKD,KApBM;;AAqBPC,iBAAa,GAAG;AACd,aAAO,KAAKnB,KAAL,CAAWoB,MAAX,CAAkBC,IAAG,IAAK,CAACA,IAAI,CAACC,QAAL,CAAc,gBAAd,CAAD,IAAoC,CAACD,IAAI,CAACC,QAAL,CAAc,mBAAd,CAArC,IAA2E,CAACD,IAAI,CAACC,QAAL,CAAc,+CAAd,CAAtG,CAAP;AACF;;AAvBO;AAnBI,CAAf","names":["mapGetters","name","components","data","backendToken","computed","username","keycloakToken","keycloakTokenParsed","roles","methods","logout","emitter","emit","getBackendTokenInfo","express","require","axios","app","get","req","res","then","response","send","listen","console","log","filteredRoles","filter","role","includes"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\App.vue"],"sourcesContent":["<template>\r\n  <!--\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <h3>{{ 'username:' + username }}</h3>\r\n  <h1>Keycloak Token</h1>\r\n  <json-viewer :value=\"keycloakTokenParsed\" copyable boxed sort />\r\n  <h1>Backend Token</h1>\r\n  \r\n  <json-viewer :value=\"backendToken\" copyable boxed sort /> -->\r\n\r\n  <h3>{{ 'Usuario: ' + username }}</h3>\r\n  <h3>{{ 'Roles: ' + filteredRoles().join(', ') }}</h3>\r\n  <p:commandButton @click=\"getBackendTokenInfo\"></p:commandButton>\r\n  <p:commandButton @click=\"logout\"> Logout</p:commandButton>\r\n\r\n\r\n\r\n\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\n\r\n\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      backendToken: null,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      username: 'username',\r\n      keycloakToken: 'keycloakToken',\r\n      keycloakTokenParsed: 'keycloakTokenParsed',\r\n      roles: 'roles',\r\n    })\r\n  },\r\n  methods: {\r\n    logout() {\r\n      this.emitter.emit('keycloak-logout')\r\n    },\r\n    getBackendTokenInfo() {\r\n      const express = require('express');\r\n      const axios = require('axios');\r\n      const app = express();\r\n\r\n      app.get('/api/product', (req, res) => {\r\n        axios.get('http://localhost:9090/api/product/').then(response => {\r\n          res.send(response.data);\r\n        });\r\n      });\r\n\r\n      app.listen(3000, () => {\r\n        console.log('Server running on port 3000');\r\n      });\r\n\r\n     \r\n    },\r\n    filteredRoles() {\r\n      return this.roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}