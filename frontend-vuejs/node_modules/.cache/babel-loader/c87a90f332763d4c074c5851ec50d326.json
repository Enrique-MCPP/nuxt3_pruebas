{"ast":null,"code":"import GenericCRUD from './GenericCRUD.vue';\nimport { mapGetters } from 'vuex';\nexport default {\n  components: {\n    GenericCRUD\n  },\n\n  data() {\n    return {\n      crudColumns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'Name',\n        field: 'name'\n      }, {\n        title: 'Email',\n        field: 'email'\n      }],\n      crudData: [{\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@example.com'\n      }, {\n        id: 2,\n        name: 'Jane Doe',\n        email: 'janedoe@example.com'\n      }],\n      editedRow: {\n        id: null,\n        name: null,\n        email: null\n      },\n      header: \"Lista de Personas\",\n      crudInputs: [{\n        label: 'Nombre',\n        value: 'name',\n        component: 'p:inputText'\n      }, {\n        label: 'Email',\n        value: 'name',\n        component: 'p:inputText'\n      }, {\n        label: 'Estado',\n        value: 'estado',\n        component: 'p:selectOneMenu',\n        options: [{\n          label: 'Opción 1',\n          value: 'opcion1'\n        }, {\n          label: 'Opción 2',\n          value: 'opcion2'\n        }, {\n          label: 'Opción 3',\n          value: 'opcion3'\n        }, {\n          label: 'Opción 4',\n          value: 'opcion4'\n        }],\n        optionLabel: 'label',\n        optionValue: 'value'\n      }, {\n        label: 'Estado',\n        value: 'estado',\n        component: 'p:selectOneMenu',\n        options: async () => {\n          const response = await this.axiosConfig.get('http://tu-api.com/api/product/');\n          const parsedData = response.data;\n          return parsedData.map(item => ({\n            label: item.nombre,\n            value: item.id\n          }));\n        },\n        optionLabel: 'label',\n        optionValue: 'value'\n      }]\n    };\n  },\n\n  computed: { ...mapGetters({\n      username: 'username',\n      keycloakToken: 'keycloakToken',\n      keycloakTokenParsed: 'keycloakTokenParsed',\n      axiosConfig: 'axiosConfig',\n      roles: 'roles'\n    })\n  }\n};","map":{"version":3,"mappings":"AASA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,eAAe;AACXC,YAAU,EAAE;AACRF;AADQ,GADD;;AAIXG,MAAI,GAAG;AACH,WAAO;AACHC,iBAAW,EAAE,CACT;AAAEC,aAAK,EAAE,IAAT;AAAeC,aAAK,EAAE;AAAtB,OADS,EAET;AAAED,aAAK,EAAE,MAAT;AAAiBC,aAAK,EAAE;AAAxB,OAFS,EAGT;AAAED,aAAK,EAAE,OAAT;AAAkBC,aAAK,EAAE;AAAzB,OAHS,CADV;AAMHC,cAAQ,EAAE,CACN;AAAEC,UAAE,EAAE,CAAN;AAASC,YAAI,EAAE,UAAf;AAA2BC,aAAK,EAAE;AAAlC,OADM,EAEN;AAAEF,UAAE,EAAE,CAAN;AAASC,YAAI,EAAE,UAAf;AAA2BC,aAAK,EAAE;AAAlC,OAFM,CANP;AAUHC,eAAS,EAAE;AACPH,UAAE,EAAE,IADG;AAEPC,YAAI,EAAE,IAFC;AAGPC,aAAK,EAAE;AAHA,OAVR;AAeHE,YAAM,EAAE,mBAfL;AAgBHC,gBAAU,EAAE,CACR;AAAEC,aAAK,EAAE,QAAT;AAAmBC,aAAK,EAAE,MAA1B;AAAkCC,iBAAS,EAAE;AAA7C,OADQ,EAER;AAAEF,aAAK,EAAE,OAAT;AAAkBC,aAAK,EAAE,MAAzB;AAAiCC,iBAAS,EAAE;AAA5C,OAFQ,EAGR;AACIF,aAAK,EAAE,QADX;AAEIC,aAAK,EAAE,QAFX;AAGIC,iBAAS,EAAE,iBAHf;AAIIC,eAAO,EAAE,CACL;AAAEH,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SADK,EAEL;AAAED,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SAFK,EAGL;AAAED,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SAHK,EAIL;AAAED,eAAK,EAAE,UAAT;AAAqBC,eAAK,EAAE;AAA5B,SAJK,CAJb;AAUIG,mBAAW,EAAE,OAVjB;AAWIC,mBAAW,EAAE;AAXjB,OAHQ,EAiBR;AACIL,aAAK,EAAE,QADX;AAEIC,aAAK,EAAE,QAFX;AAGIC,iBAAS,EAAE,iBAHf;AAKIC,eAAO,EAAE,YAAY;AACjB,gBAAMG,QAAO,GAAI,MAAM,KAAKC,WAAL,CAAiBC,GAAjB,CAAqB,gCAArB,CAAvB;AACA,gBAAMC,UAAS,GAAIH,QAAQ,CAACjB,IAA5B;AACA,iBAAOoB,UAAU,CAACC,GAAX,CAAgBC,IAAD,KAAW;AAC7BX,iBAAK,EAAEW,IAAI,CAACC,MADiB;AAE7BX,iBAAK,EAAEU,IAAI,CAACjB;AAFiB,WAAX,CAAf,CAAP;AAIH,SAZL;AAaIU,mBAAW,EAAE,OAbjB;AAcIC,mBAAW,EAAE;AAdjB,OAjBQ;AAhBT,KAAP;AAsDH,GA3DU;;AA4DXQ,UAAQ,EAAE,EACV,GAAG1B,UAAU,CAAC;AACZ2B,cAAQ,EAAE,UADE;AAEZC,mBAAa,EAAE,eAFH;AAGZC,yBAAmB,EAAE,qBAHT;AAIZT,iBAAW,EAAE,aAJD;AAKZU,WAAK,EAAE;AALK,KAAD;AADH;AA5DC,CAAf","names":["GenericCRUD","mapGetters","components","data","crudColumns","title","field","crudData","id","name","email","editedRow","header","crudInputs","label","value","component","options","optionLabel","optionValue","response","axiosConfig","get","parsedData","map","item","nombre","computed","username","keycloakToken","keycloakTokenParsed","roles"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD :columns=\"crudColumns\" :data=\"crudData\" :editedRow=\"editedRow\" :header=\"header\"\r\n            :crudInputs=\"crudInputs\"></GenericCRUD>\r\n\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\nimport { mapGetters } from 'vuex';\r\nexport default {\r\n    components: {\r\n        GenericCRUD\r\n    },\r\n    data() {\r\n        return {\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Email', field: 'email' }\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: 'John Doe', email: 'johndoe@example.com' },\r\n                { id: 2, name: 'Jane Doe', email: 'janedoe@example.com' }\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                name: null,\r\n                email: null\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'name', component: 'p:inputText' },\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estado',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n                    optionLabel: 'label',\r\n                    optionValue: 'value'\r\n                },\r\n\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estado',\r\n                    component: 'p:selectOneMenu',\r\n\r\n                    options: async () => {\r\n                        const response = await this.axiosConfig.get('http://tu-api.com/api/product/');\r\n                        const parsedData = response.data;\r\n                        return parsedData.map((item) => ({\r\n                            label: item.nombre,\r\n                            value: item.id,\r\n                        }));\r\n                    },\r\n                    optionLabel: 'label',\r\n                    optionValue: 'value'\r\n                }\r\n            ]\r\n\r\n        }\r\n\r\n\r\n    },\r\n    computed: {\r\n    ...mapGetters({\r\n      username: 'username',\r\n      keycloakToken: 'keycloakToken',\r\n      keycloakTokenParsed: 'keycloakTokenParsed',\r\n      axiosConfig: 'axiosConfig',\r\n      roles: 'roles',\r\n    })\r\n  },\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}