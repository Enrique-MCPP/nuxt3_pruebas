{"ast":null,"code":"import GenericCRUD from './GenericCRUD.vue';\nimport PedidoService from '@/service/PedidoService';\nexport default {\n  components: {\n    GenericCRUD\n  },\n\n  data() {\n    /*\r\n    const options = [\r\n        { label: \"Opción 1\", value: \"opcion1\" },\r\n        { label: \"Opción 2\", value: \"opcion2\" },\r\n        { label: \"Opción 3\", value: \"opcion3\" },\r\n        { label: \"Opción 4\", value: \"opcion4\" },\r\n    ];*/\n    return {\n      selectedProduct: null,\n      selectedProductosUnoList: [],\n      selectedProductosDosList: [],\n      crudColumns: [{\n        title: 'ID',\n        field: 'id'\n      }, {\n        title: 'Name',\n        field: 'name'\n      }, {\n        title: 'Email',\n        field: 'email'\n      }],\n      crudData: [{\n        id: 1,\n        name: 'John Doe',\n        email: 'johndoe@example.com'\n      }, {\n        id: 2,\n        name: 'Jane Doe',\n        email: 'janedoe@example.com'\n      }],\n      editedRow: {\n        id: null,\n        estado: null,\n        productos: null,\n        precioTotal: null,\n        direccionEnvio: null,\n        metodoDePago: null,\n        numSeguimiento: null,\n        observaciones: null\n      },\n      header: \"Lista de Personas\",\n      crudInputs: [{\n        label: 'Nº de seguimiento',\n        value: 'numSeguimiento',\n        component: 'p:inputText'\n      }, {\n        label: 'Método de pago',\n        value: 'metodoDePago',\n        component: 'p:selectOneMenu',\n        options: [{\n          label: 'Paypal',\n          value: 'Paypal'\n        }, {\n          label: 'Bizum',\n          value: 'Bizum'\n        }, {\n          label: 'Tarje de crédito',\n          value: 'Tarjeta de crédito'\n        }]\n      }, {\n        id: 'idEstado',\n        label: 'Selecciona un estado',\n        value: 'estado',\n        customValue: true,\n        component: 'p:selectOneMenu',\n        pathList: \"/api/estado/\"\n      }, {\n        id: 'idDialogproductosUno',\n        label: 'Selecciona productos uno',\n        component: 'ZDialog',\n        zDialogData: [],\n        zDialogColumns: [//agregar las columnas aquí\n        {\n          field: 'id',\n          header: 'ID'\n        }, {\n          field: 'nombre',\n          header: 'Nombre'\n        }, {\n          field: 'descripción',\n          header: 'Descripción'\n        }],\n        localLabelDialogButton: 'Selecciona productos uno',\n        pathList: \"/api/product/\",\n        header: \"Lista de Productos\"\n      }, {\n        label: 'Dirección de envío',\n        value: 'direccionEnvio',\n        component: 'p:inputText'\n      }, {\n        label: 'Precio total',\n        value: 'precioTotal',\n        component: 'p:inputText'\n      }, {\n        label: 'Observaciones',\n        value: 'observaciones',\n        component: 'TextArea'\n      }],\n\n      /*\r\n      crudInputs: [\r\n          { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n          { label: 'Email', value: 'email', component: 'p:inputText' },\r\n          //selectOneMenu proporcionando lista directamente como variable en el cuerpo de data\r\n          {\r\n              label: 'Estado con lista como variable',\r\n              value: 'estadoUno',\r\n              component: 'p:selectOneMenu',\r\n              options\r\n            },\r\n          //selectOneMenu proporcionando lista directamente\r\n            {\r\n              label: 'Estado',\r\n              value: 'estadoDos',\r\n              component: 'p:selectOneMenu',\r\n              options: [\r\n                  { label: 'Opción 1', value: 'opcion1' },\r\n                  { label: 'Opción 2', value: 'opcion2' },\r\n                  { label: 'Opción 3', value: 'opcion3' },\r\n                  { label: 'Opción 4', value: 'opcion4' }\r\n              ],\r\n            },\r\n          //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n          {\r\n              id: 'idProducto',\r\n              label: 'Selecciona un producto',\r\n              value: 'producto',\r\n              customValue: true,\r\n              component: 'p:selectOneMenu',\r\n              pathList: \"/api/product/\"\r\n            },\r\n          {\r\n              id: 'idProducto',\r\n              label: 'Selecciona varios productos',\r\n              value: 'productos',\r\n              component: 'p:selectCheckBoxMenu',\r\n              pathList: \"/api/product/\"\r\n            },\r\n          { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n          {\r\n              label: 'En stock',\r\n              value: 'checkBox',\r\n              component: 'p:triStateCheckbox'\r\n          },\r\n          {\r\n              id: 'idDialogproductosUno',\r\n              label: 'Selecciona productos uno',\r\n              component: 'ZDialog',\r\n              zDialogData: [],\r\n              zDialogColumns: [ //agregar las columnas aquí\r\n                  { field: 'id', header: 'ID' },\r\n                  { field: 'nombre', header: 'Nombre' },\r\n                  { field: 'descripción', header: 'Descripción' },\r\n              ],\r\n              localLabelDialogButton: 'Selecciona productos uno',\r\n              pathList: \"/api/product/\",\r\n              header: \"Lista de Productos\",\r\n          },\r\n          {\r\n              id: 'idDialogproductosDos',\r\n              label: 'Selecciona otros productos dos',\r\n              component: 'ZDialog',\r\n              zDialogData: [],\r\n              zDialogColumns: [ //agregar las columnas aquí\r\n                  { field: 'id', header: 'ID' },\r\n                  { field: 'nombre', header: 'Nombre' },\r\n                  { field: 'descripción', header: 'Descripción' },\r\n              ],\r\n              localLabelDialogButton: 'Selecciona productos dos',\r\n              pathList: \"/api/product/\",\r\n              header: \"Lista de Productos\",\r\n          }\r\n      ]*/\n      crudButtons: [{\n        label: 'Nuevo',\n        onClick: \"create\",\n        icon: 'pi pi-plus',\n        className: 'p-button-success mr-2',\n        component: 'p:commandButton'\n      }, {\n        label: 'Guardar',\n        onClick: \"save\",\n        icon: 'pi pi-save',\n        className: '',\n        component: 'p:commandButton'\n      }, {\n        label: 'Eliminar',\n        onClick: \"remove\",\n        icon: 'pi pi-trash',\n        className: 'p-button-danger',\n        component: 'p:commandButton'\n      }, {\n        label: 'Refrescar',\n        onClick: \"getAll\",\n        icon: 'pi pi-refresh',\n        className: 'p-button-danger',\n        component: 'p:commandButton'\n      }]\n    };\n  },\n\n  beforeCreate() {\n    this.pedidoService = new PedidoService();\n    this.editedRow.productos = this.selectedProductosUnoList;\n  },\n\n  methods: {\n    onElementosDialogSeleccionados(elementosSeleccionados, idDialog) {\n      if (idDialog === 'idDialogproductosUno') {\n        this.selectedProductosUnoList = elementosSeleccionados;\n      } else if (idDialog === 'idDialogproductosDos') {\n        this.selectedProductosDosList = elementosSeleccionados;\n      }\n    },\n\n    beforeSave(callback) {\n      // aquí se hace todo el proceso previo al guardado\n      // cuando termine, se llama a la función de callback\n      console.log('BeforeSave del padre');\n      callback();\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["GenericCRUD","PedidoService","components","data","selectedProduct","selectedProductosUnoList","selectedProductosDosList","crudColumns","title","field","crudData","id","name","email","editedRow","estado","productos","precioTotal","direccionEnvio","metodoDePago","numSeguimiento","observaciones","header","crudInputs","label","value","component","options","customValue","pathList","zDialogData","zDialogColumns","localLabelDialogButton","crudButtons","onClick","icon","className","beforeCreate","pedidoService","methods","onElementosDialogSeleccionados","elementosSeleccionados","idDialog","beforeSave","callback","console","log"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD @elementosSeleccionados=\"onElementosDialogSeleccionados\" :columns=\"crudColumns\" :data=\"crudData\"\r\n            :beforeSave=\"beforeSave\" :editedRow=\"editedRow\" :header=\"header\" :crudInputs=\"crudInputs\"\r\n            :selectedProduct=\"selectedProduct\" :crudButtons=\"crudButtons\" :service=\"pedidoService\">\r\n        </GenericCRUD>\r\n\r\n    </div>\r\n    <div>Productos seleccionados uno: {{ selectedProductosUnoList }}</div>\r\n    <div>Productos seleccionados dos: {{ selectedProductosDosList }}</div>\r\n    <p_toast></p_toast>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\nimport PedidoService from '@/service/PedidoService';\r\n\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD,\r\n\r\n    },\r\n    data() {\r\n        /*\r\n        const options = [\r\n            { label: \"Opción 1\", value: \"opcion1\" },\r\n            { label: \"Opción 2\", value: \"opcion2\" },\r\n            { label: \"Opción 3\", value: \"opcion3\" },\r\n            { label: \"Opción 4\", value: \"opcion4\" },\r\n        ];*/\r\n        return {\r\n\r\n            selectedProduct: null,\r\n            selectedProductosUnoList: [],\r\n            selectedProductosDosList: [],\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Email', field: 'email' }\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: 'John Doe', email: 'johndoe@example.com' },\r\n                { id: 2, name: 'Jane Doe', email: 'janedoe@example.com' }\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                estado: null,\r\n                productos: null,\r\n                precioTotal: null,\r\n                direccionEnvio: null,\r\n                metodoDePago: null,\r\n                numSeguimiento: null,\r\n                observaciones: null,\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: 'Nº de seguimiento', value: 'numSeguimiento', component: 'p:inputText' },\r\n                {\r\n                    label: 'Método de pago',\r\n                    value: 'metodoDePago',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Paypal', value: 'Paypal' },\r\n                        { label: 'Bizum', value: 'Bizum' },\r\n                        { label: 'Tarje de crédito', value: 'Tarjeta de crédito' },\r\n                    ],\r\n\r\n                },\r\n                {\r\n                    id: 'idEstado',\r\n                    label: 'Selecciona un estado',\r\n                    value: 'estado',\r\n                    customValue: true,\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/estado/\"\r\n\r\n                },\r\n                {\r\n                    id: 'idDialogproductosUno',\r\n                    label: 'Selecciona productos uno',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos uno',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                },\r\n                { label: 'Dirección de envío', value: 'direccionEnvio', component: 'p:inputText' },\r\n                { label: 'Precio total', value: 'precioTotal', component: 'p:inputText' },\r\n                { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n            ],\r\n            /*\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'email', component: 'p:inputText' },\r\n                //selectOneMenu proporcionando lista directamente como variable en el cuerpo de data\r\n                {\r\n                    label: 'Estado con lista como variable',\r\n                    value: 'estadoUno',\r\n                    component: 'p:selectOneMenu',\r\n                    options\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista directamente\r\n\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estadoDos',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona un producto',\r\n                    value: 'producto',\r\n                    customValue: true,\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona varios productos',\r\n                    value: 'productos',\r\n                    component: 'p:selectCheckBoxMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n                {\r\n                    label: 'En stock',\r\n                    value: 'checkBox',\r\n                    component: 'p:triStateCheckbox'\r\n                },\r\n                {\r\n                    id: 'idDialogproductosUno',\r\n                    label: 'Selecciona productos uno',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos uno',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                },\r\n                {\r\n                    id: 'idDialogproductosDos',\r\n                    label: 'Selecciona otros productos dos',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos dos',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                }\r\n            ]*/\r\n            crudButtons: [\r\n                {\r\n                    label: 'Nuevo',\r\n                    onClick: \"create\",\r\n                    icon: 'pi pi-plus',\r\n                    className: 'p-button-success mr-2',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Guardar',\r\n                    onClick: \"save\",\r\n                    icon: 'pi pi-save',\r\n                    className: '',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Eliminar',\r\n                    onClick: \"remove\",\r\n                    icon: 'pi pi-trash',\r\n                    className: 'p-button-danger',\r\n                    component: 'p:commandButton',\r\n                },\r\n                {\r\n                    label: 'Refrescar',\r\n                    onClick: \"getAll\",\r\n                    icon: 'pi pi-refresh',\r\n                    className: 'p-button-danger',\r\n                    component: 'p:commandButton',\r\n                },\r\n            ],\r\n\r\n\r\n        }\r\n\r\n\r\n    },\r\n    beforeCreate() {\r\n        this.pedidoService = new PedidoService();\r\n        this.editedRow.productos = this.selectedProductosUnoList;\r\n    },\r\n    methods: {\r\n        onElementosDialogSeleccionados(elementosSeleccionados, idDialog) {\r\n            if (idDialog === 'idDialogproductosUno') {\r\n                this.selectedProductosUnoList = elementosSeleccionados;\r\n            } else if (idDialog === 'idDialogproductosDos') {\r\n                this.selectedProductosDosList = elementosSeleccionados;\r\n            }\r\n\r\n        },\r\n        beforeSave(callback) {\r\n            // aquí se hace todo el proceso previo al guardado\r\n            // cuando termine, se llama a la función de callback\r\n            console.log('BeforeSave del padre');\r\n            callback();\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}