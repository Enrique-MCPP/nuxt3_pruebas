{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\"Logout\");\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_p58commandButton = _resolveComponent(\"p:commandButton\");\n  const _component_PedidosCRUD = _resolveComponent(\"PedidosCRUD\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"h3\", null, _toDisplayString('Usuario: ' + _ctx.username), 1 /* TEXT */), _createElementVNode(\"h3\", null, _toDisplayString('Roles: ' + _ctx.filteredRoles().join(', ')), 1 /* TEXT */), _createVNode(_component_p58commandButton, {\n    onClick: _ctx.logout\n  }, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_PedidosCRUD)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","_toDisplayString","_ctx","username","filteredRoles","join","_createVNode","_component_p58commandButton","onClick","logout","_component_PedidosCRUD"],"sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\App.vue"],"sourcesContent":["<template>\r\n  <h3>{{ 'Usuario: ' + username }}</h3>\r\n  <h3>{{ 'Roles: ' + filteredRoles().join(', ') }}</h3>\r\n  <p:commandButton @click=\"logout\">Logout</p:commandButton>\r\n\r\n  <PedidosCRUD />\r\n</template>\r\n\r\n<script>\r\nimport { computed, defineComponent } from 'vue'\r\nimport { mapGetters } from 'vuex'\r\nimport PedidosCRUD from './componentes/PedidosCRUD.vue'\r\n\r\nexport default defineComponent({\r\n  name: 'App',\r\n  components: {\r\n    PedidosCRUD\r\n  },\r\n  setup() {\r\n    const backendToken = null\r\n    const { username, keycloakToken, keycloakTokenParsed, roles } = mapGetters([\r\n      'username',\r\n      'keycloakToken',\r\n      'keycloakTokenParsed',\r\n      'roles'\r\n    ])\r\n\r\n    const logout = () => {\r\n      // replace with the logic to logout\r\n    }\r\n\r\n    const getBackendTokenInfo = () => {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${keycloakToken.value}`\r\n        }\r\n      }\r\n      this.axios.get('api/product/', config).then((response) => {\r\n        backendToken.value = response.data\r\n      })\r\n    }\r\n\r\n    const filteredRoles = computed(() => {\r\n      return roles.value.filter(\r\n        (role) =>\r\n          !role.includes('offline_access') &&\r\n          !role.includes('uma_authorization') &&\r\n          !role.includes('default-roles-spring-boot-microservices-realm')\r\n      )\r\n    })\r\n\r\n    return {\r\n      backendToken,\r\n      username,\r\n      keycloakToken,\r\n      keycloakTokenParsed,\r\n      roles,\r\n      logout,\r\n      getBackendTokenInfo,\r\n      filteredRoles\r\n    }\r\n  }\r\n})\r\n</script>\r\n\r\n<style></style>\r\n"],"mappings":";iDAGmC,QAAM;;;;6DAFvCA,mBAAA,CAAqC,YAAAC,gBAAA,eAAhBC,IAAA,CAAAC,QAAQ,kBAC7BH,mBAAA,CAAqD,YAAAC,gBAAA,aAAlCC,IAAA,CAAAE,aAAa,GAAGC,IAAI,wBACvCC,YAAA,CAAyDC,2BAAA;IAAvCC,OAAK,EAAEN,IAAA,CAAAO;EAAM;sBAAE,MAAM,C;;kCAEvCH,YAAA,CAAeI,sBAAA,E"},"metadata":{},"sourceType":"module"}