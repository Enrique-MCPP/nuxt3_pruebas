{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GenericCRUD = _resolveComponent(\"GenericCRUD\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createVNode(_component_GenericCRUD, {\n    onElementosSeleccionados: _cache[0] || (_cache[0] = $event => $options.onElementosSeleccionados($event[0], $event[1])),\n    columns: $data.crudColumns,\n    data: $data.crudData,\n    editedRow: $data.editedRow,\n    header: $data.header,\n    crudInputs: $data.crudInputs,\n    selectedProduct: $data.selectedProduct\n  }, null, 8\n  /* PROPS */\n  , [\"columns\", \"data\", \"editedRow\", \"header\", \"crudInputs\", \"selectedProduct\"])]), _createElementVNode(\"div\", null, \"Productos seleccionados 1: \" + _toDisplayString($data.selectedProductosUnoList), 1\n  /* TEXT */\n  ), _createElementVNode(\"div\", null, \"Productos seleccionados 2: \" + _toDisplayString($data.selectedProductosDosList), 1\n  /* TEXT */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;6DACIA,oBAKM,KALN,EAKM,IALN,EAKM,CAJFC,aAEcC,sBAFd,EAEc;AAFAC,4BAAsB,sCAAEC,kCAAyBC,MAAM,GAA/B,EAAoCA,MAAM,GAA1C,CAAF,CAEtB;AAFyEC,WAAO,EAAEC,iBAElF;AAFgGC,QAAI,EAAED,cAEtG;AADTE,aAAS,EAAEF,eACF;AADcG,UAAM,EAAEH,YACtB;AAD+BI,cAAU,EAAEJ,gBAC3C;AADwDK,mBAAe,EAAEL;AACzE,GAFd;;AAAA,gFAIE,CALN,GAMAP,oBAAoE,KAApE,EAAoE,IAApE,EAAK,gCAA2Ba,iBAAGN,8BAAH,CAAhC,EAA2D;AAAA;AAA3D,KACAP,oBAAoE,KAApE,EAAoE,IAApE,EAAK,gCAA2Ba,iBAAGN,8BAAH,CAAhC,EAA2D;AAAA;AAA3D","names":["_createElementVNode","_createVNode","_component_GenericCRUD","onElementosSeleccionados","$options","$event","columns","$data","data","editedRow","header","crudInputs","selectedProduct","_toDisplayString"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\UseGenericCRUD.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <GenericCRUD @elementosSeleccionados=\"onElementosSeleccionados($event[0], $event[1])\" :columns=\"crudColumns\" :data=\"crudData\"\r\n            :editedRow=\"editedRow\" :header=\"header\" :crudInputs=\"crudInputs\" :selectedProduct=\"selectedProduct\">\r\n        </GenericCRUD>\r\n\r\n    </div>\r\n    <div>Productos seleccionados 1: {{ selectedProductosUnoList }}</div>\r\n    <div>Productos seleccionados 2: {{ selectedProductosDosList }}</div>\r\n</template>\r\n  \r\n<script>\r\nimport GenericCRUD from './GenericCRUD.vue';\r\n\r\n\r\n\r\nexport default {\r\n    components: {\r\n        GenericCRUD,\r\n\r\n    },\r\n    data() {\r\n        const options = [\r\n            { label: \"Opción 1\", value: \"opcion1\" },\r\n            { label: \"Opción 2\", value: \"opcion2\" },\r\n            { label: \"Opción 3\", value: \"opcion3\" },\r\n            { label: \"Opción 4\", value: \"opcion4\" },\r\n        ];\r\n        return {\r\n\r\n            selectedProduct: null,\r\n            selectedProductosUnoList: [],\r\n            selectedProductosDosList: [],\r\n            crudColumns: [\r\n                { title: 'ID', field: 'id' },\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Email', field: 'email' }\r\n            ],\r\n            crudData: [\r\n                { id: 1, name: 'John Doe', email: 'johndoe@example.com' },\r\n                { id: 2, name: 'Jane Doe', email: 'janedoe@example.com' }\r\n            ],\r\n            editedRow: {\r\n                id: null,\r\n                name: null,\r\n                email: null,\r\n                checkBox: null\r\n            },\r\n            header: \"Lista de Personas\",\r\n            crudInputs: [\r\n                { label: 'Nombre', value: 'name', component: 'p:inputText' },\r\n                { label: 'Email', value: 'email', component: 'p:inputText' },\r\n                //selectOneMenu proporcionando lista directamente como variable en el cuerpo de data\r\n                {\r\n                    label: 'Estado con lista como variable',\r\n                    value: 'estadoUno',\r\n                    component: 'p:selectOneMenu',\r\n                    options\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista directamente\r\n\r\n                {\r\n                    label: 'Estado',\r\n                    value: 'estadoDos',\r\n                    component: 'p:selectOneMenu',\r\n                    options: [\r\n                        { label: 'Opción 1', value: 'opcion1' },\r\n                        { label: 'Opción 2', value: 'opcion2' },\r\n                        { label: 'Opción 3', value: 'opcion3' },\r\n                        { label: 'Opción 4', value: 'opcion4' }\r\n                    ],\r\n\r\n                },\r\n                //selectOneMenu proporcionando lista desde bbdd dando el path.\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona un producto',\r\n                    value: 'producto',\r\n                    customValue: true,\r\n                    component: 'p:selectOneMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                {\r\n                    id: 'idProducto',\r\n                    label: 'Selecciona varios productos',\r\n                    value: 'productos',\r\n                    component: 'p:selectCheckBoxMenu',\r\n                    pathList: \"/api/product/\"\r\n\r\n                },\r\n                { label: 'Observaciones', value: 'observaciones', component: 'TextArea' },\r\n                {\r\n                    label: 'En stock',\r\n                    value: 'checkBox',\r\n                    component: 'p:triStateCheckbox'\r\n                },\r\n                {\r\n                    id: 'idDialogProductosUno',\r\n                    label: 'Selecciona productos 1',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                },\r\n                {\r\n                    id: 'idDialogproductosDos',\r\n                    label: 'Selecciona productos 2',\r\n                    component: 'ZDialog',\r\n                    zDialogData: [],\r\n                    zDialogColumns: [ //agregar las columnas aquí\r\n                        { field: 'id', header: 'ID' },\r\n                        { field: 'nombre', header: 'Nombre' },\r\n                        { field: 'descripción', header: 'Descripción' },\r\n                    ],\r\n                    localLabelDialogButton: 'Selecciona productos',\r\n                    pathList: \"/api/product/\",\r\n                    header: \"Lista de Productos\",\r\n                }\r\n\r\n\r\n\r\n            ]\r\n\r\n        }\r\n\r\n\r\n    },\r\n    methods: {\r\n        onElementosSeleccionados(elementosSeleccionados, dialogId) {\r\n         \r\n            console.log('Hola onElementosSeleccionados');\r\n            if (dialogId === 'idDialogProductosUno') {\r\n                console.log('dialog 1');\r\n                this.selectedProductosUnoList = elementosSeleccionados;\r\n            } else if (dialogId === 'idDialogProductosDos') {\r\n                console.log('dialog 2')\r\n                this.selectedProductosDosList = elementosSeleccionados;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}