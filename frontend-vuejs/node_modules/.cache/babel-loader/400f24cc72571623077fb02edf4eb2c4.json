{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createTextVNode(\" Logout\");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_p58commandButton = _resolveComponent(\"p:commandButton\");\n\n  const _component_UseGenericCRUD = _resolveComponent(\"UseGenericCRUD\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"\\r\\n  <img alt=\\\"Vue logo\\\" src=\\\"./assets/logo.png\\\">\\r\\n  <h3>{{ 'username:' + username }}</h3>\\r\\n  <h1>Keycloak Token</h1>\\r\\n  <json-viewer :value=\\\"keycloakTokenParsed\\\" copyable boxed sort />\\r\\n  <h1>Backend Token</h1>\\r\\n  <BuTTon @click=\\\"getBackendTokenInfo\\\"> Auth Token Info</BuTTon>\\r\\n  <json-viewer :value=\\\"backendToken\\\" copyable boxed sort /> \"), _createElementVNode(\"h3\", null, _toDisplayString('Usuario: ' + _ctx.username), 1\n  /* TEXT */\n  ), _createElementVNode(\"h3\", null, _toDisplayString('Roles: ' + $options.filteredRoles().join(', ')), 1\n  /* TEXT */\n  ), _createVNode(_component_p58commandButton, {\n    onClick: $options.logout\n  }, {\n    default: _withCtx(() => [_hoisted_1]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"onClick\"]), _createVNode(_component_UseGenericCRUD)], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;iDAYmC;;;;;;;6DAXjCA,mYAQAC,oBAAqC,IAArC,EAAqC,IAArC,EAAqCC,+BAAhBC,aAAgB,CAArC,EAA6B;AAAA;AAA7B,KACAF,oBAAqD,IAArD,EAAqD,IAArD,EAAqDC,6BAAlCE,yBAAgBC,IAAhB,CAAoB,IAApB,CAAkC,CAArD,EAAuC;AAAA;AAAvC,KAEAC,aAA0DC,2BAA1D,EAA0D;AAAxCC,WAAK,EAAEJ;AAAiC,GAA1D,EAA+B;sBAAE,MAAO,aAAT;;;;AAAA,GAA/B;;AAAA,kBAIAE,aAAkBG,yBAAlB","names":["_createCommentVNode","_createElementVNode","_toDisplayString","_ctx","$options","join","_createVNode","_component_p58commandButton","onClick","_component_UseGenericCRUD"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\App.vue"],"sourcesContent":["<template>\r\n  <!--\r\n  <img alt=\"Vue logo\" src=\"./assets/logo.png\">\r\n  <h3>{{ 'username:' + username }}</h3>\r\n  <h1>Keycloak Token</h1>\r\n  <json-viewer :value=\"keycloakTokenParsed\" copyable boxed sort />\r\n  <h1>Backend Token</h1>\r\n  <BuTTon @click=\"getBackendTokenInfo\"> Auth Token Info</BuTTon>\r\n  <json-viewer :value=\"backendToken\" copyable boxed sort /> -->\r\n  <h3>{{ 'Usuario: ' + username }}</h3>\r\n  <h3>{{ 'Roles: ' + filteredRoles().join(', ') }}</h3>\r\n\r\n  <p:commandButton @click=\"logout\"> Logout</p:commandButton>\r\n\r\n\r\n\r\n  <UseGenericCRUD />\r\n \r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex'\r\n\r\n\r\nimport UseGenericCRUD from './componentes/UseGenericCRUD.vue'\r\nimport MyCheckbox from './componentes/MyCheckbox.vue'\r\nimport ZDialog from './componentes/ZDialog.vue'\r\n\r\n\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n\r\n\r\n    UseGenericCRUD,\r\n    MyCheckbox,\r\n    ZDialog\r\n\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      backendToken: null,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      username: 'username',\r\n      keycloakToken: 'keycloakToken',\r\n      keycloakTokenParsed: 'keycloakTokenParsed',\r\n      roles: 'roles',\r\n    })\r\n  },\r\n  methods: {\r\n    logout() {\r\n      this.emitter.emit('keycloak-logout')\r\n    },\r\n    getBackendTokenInfo() {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${this.keycloakToken}`\r\n        }\r\n      }\r\n      this.axios.get(\"api/product/\", config).then((response) => {\r\n        this.backendToken = response.data\r\n      })\r\n    },\r\n    filteredRoles() {\r\n      return this.roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style></style>"]},"metadata":{},"sourceType":"module"}