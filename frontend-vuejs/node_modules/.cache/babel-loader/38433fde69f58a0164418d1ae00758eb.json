{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"label\", null, _toDisplayString($props.label), 1\n  /* TEXT */\n  ), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.localValue = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.handleChange && $options.handleChange(...args))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelCheckbox, $data.localValue]])]);\n}","map":{"version":3,"mappings":";;uBACIA,oBAGM,KAHN,EAGM,IAHN,EAGM,CAFJC,oBAA0B,OAA1B,EAA0B,IAA1B,EAA0BC,iBAAhBC,YAAgB,CAA1B,EAAe;AAAA;AAAf,GAEI,kBADJF,oBAAmE,OAAnE,EAAmE;AAA5DG,QAAI,EAAC,UAAuD;+DAAnCC,mBAAUC,OAAyB;AAAtBC,YAAM,yCAAEC,uDAAF;AAAgB,GAAnE;;AAAA,wBAAgCH,mBAC5B,CAHN","names":["_createElementBlock","_createElementVNode","_toDisplayString","$props","type","$data","$event","onChange","$options"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\MyCheckbox.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <label>{{ label }}</label>\r\n      <input type=\"checkbox\" v-model=\"localValue\" @change=\"handleChange\">\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    props: {\r\n      value: { // v-model value\r\n        type: Boolean,\r\n        required: true\r\n      },\r\n      label: { // label text\r\n        type: String,\r\n        required: true\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        localValue: null // local value for tri-state checkbox\r\n      }\r\n    },\r\n    mounted() {\r\n      this.localValue = this.value\r\n    },\r\n    methods: {\r\n      handleChange() {\r\n        if (this.localValue === null) {\r\n          this.localValue = true\r\n        } else if (this.localValue === true) {\r\n          this.localValue = false\r\n        } else {\r\n          this.localValue = null\r\n        }\r\n        this.$emit('input', this.localValue)\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  "]},"metadata":{},"sourceType":"module"}