{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GenericDatatable = _resolveComponent(\"GenericDatatable\");\n  const _component_p_toast = _resolveComponent(\"p_toast\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_GenericDatatable, {\n    columns: $setup.crudColumns,\n    header: $setup.header,\n    state: $setup.state\n  }, null, 8 /* PROPS */, [\"columns\", \"header\", \"state\"]), _createVNode(_component_p_toast)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createVNode","_component_GenericDatatable","columns","$setup","crudColumns","header","state","_component_p_toast"],"sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\PedidosCRUD.vue"],"sourcesContent":["<template>\r\n  <GenericDatatable :columns=\"crudColumns\" :header=\"header\" :state=\"state\">\r\n  </GenericDatatable>\r\n\r\n  <p_toast></p_toast>\r\n</template>\r\n\r\n<script>\r\nimport { useStore } from 'vuex';\r\nimport { tableBean } from '@/composables/tableBean';\r\nimport PedidoService from '@/service/PedidoService';\r\nimport EstadoService from '@/service/EstadoService';\r\nimport { computed, ref, provide } from 'vue';\r\nimport GenericDatatable from './GenericDatatable.vue';\r\nimport { rowSelectListenerPedidos, beforeSave, beforeCreate, beforeDelete } from '@/utils/tableUtils.js';\r\nimport ToastService from 'primevue/toastservice';\r\n\r\nexport default {\r\n  components: {\r\n    GenericDatatable,\r\n  },\r\n  setup() {\r\n    // Llamamos a la función list() al exportar la función tableBean\r\n\r\n    provide('rowSelectListenerPedidos', (selectedRow) => rowSelectListenerPedidos(selectedRow, rowSelectListener));\r\n    provide('beforeSave', (editedRow) => beforeSave(editedRow, save));\r\n    provide('beforeCreate', () => beforeCreate(create));\r\n    provide('beforeDelete', (editedRow) => beforeDelete(editedRow, remove));\r\n\r\n    const store = useStore();\r\n    const axiosConfig = computed(() => store.getters.axiosConfig);\r\n    const pedidoService = new PedidoService();\r\n    const estadoService = new EstadoService();\r\n\r\n\r\n    const { state, list, create, save, remove, rowSelectListener } = tableBean(pedidoService, axiosConfig.value, ToastService);\r\n\r\n\r\n\r\n    const header = \"Lista de Pedidos\";\r\n    const crudColumns = [\r\n      { title: 'ID', field: 'id' },\r\n      { title: 'Nº de seguimiento', field: 'numSeguimiento' },\r\n      { title: 'Método de pago', field: 'metodoDePago' },\r\n      { title: 'Estado', field: 'estado?.nombre' },\r\n      { title: 'Precio total', field: 'precioTotal' },\r\n      { title: 'Dirección de envío', field: 'direccionEnvio' },\r\n      { title: 'Observaciones', field: 'observaciones' },\r\n      { title: 'Fecha del pedido', field: 'fechaPedido' },\r\n    ];\r\n    /**Obtener los estados para el selectOnemenu de estados */\r\n    const estados = ref([]);\r\n    const getEstados = async () => {\r\n      const response = await estadoService.getAll(axiosConfig.value);\r\n      estados.value = response.data;\r\n    }\r\n    if (estados.value.length === 0) {\r\n      getEstados();\r\n    }\r\n\r\n\r\n    return {\r\n      state,\r\n      list,\r\n      crudColumns,\r\n      rowSelectListener,\r\n      header,\r\n      save,\r\n      remove,\r\n      create,\r\n      estados,\r\n    };\r\n  }\r\n\r\n\r\n};\r\n</script>\r\n"],"mappings":";;;;6DACEA,YAAA,CACmBC,2BAAA;IADAC,OAAO,EAAEC,MAAA,CAAAC,WAAW;IAAGC,MAAM,EAAEF,MAAA,CAAAE,MAAM;IAAGC,KAAK,EAAEH,MAAA,CAAAG;2DAGlEN,YAAA,CAAmBO,kBAAA,E"},"metadata":{},"sourceType":"module"}