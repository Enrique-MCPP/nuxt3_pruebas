{"ast":null,"code":"import { mapGetters } from 'vuex';\nimport ProductoService from '@/service/ProductoService';\nexport default {\n  name: 'CrudApp',\n\n  data() {\n    return {\n      productos: [],\n      items: [{\n        label: 'Nuevo',\n        icon: 'pi pi-fw pi-plus'\n      }]\n    };\n  },\n\n  productoService: null,\n\n  created() {\n    this.productoService = new ProductoService();\n  },\n\n  computed: { ...mapGetters({\n      username: 'username',\n      keycloakToken: 'keycloakToken',\n      keycloakTokenParsed: 'keycloakTokenParsed'\n    })\n  },\n  watch: {\n    keycloakToken: function (val) {\n      if (val) {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${val}`\n          }\n        };\n        this.productoService.getAll(config).then(response => {\n          this.productos = response.data;\n        });\n      }\n    }\n  },\n  methods: {}\n};","map":{"version":3,"mappings":"AAyBA,SAASA,UAAT,QAA2B,MAA3B;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,eAAe;AACbC,MAAI,EAAE,SADO;;AAEbC,MAAI,GAAG;AACL,WAAO;AACLC,eAAS,EAAE,EADN;AAELC,WAAK,EAAE,CACL;AACEC,aAAK,EAAE,OADT;AAEEC,YAAI,EAAE;AAFR,OADK;AAFF,KAAP;AAWD,GAdY;;AAebC,iBAAe,EAAE,IAfJ;;AAgBbC,SAAO,GAAG;AACR,SAAKD,eAAL,GAAuB,IAAIP,eAAJ,EAAvB;AACD,GAlBY;;AAmBbS,UAAQ,EAAE,EACR,GAAGV,UAAU,CAAC;AACZW,cAAQ,EAAE,UADE;AAEZC,mBAAa,EAAE,eAFH;AAGZC,yBAAmB,EAAE;AAHT,KAAD;AADL,GAnBG;AA0BbC,OAAK,EAAE;AAELF,iBAAa,EAAE,UAAUG,GAAV,EAAe;AAC5B,UAAIA,GAAJ,EAAS;AACP,cAAMC,MAAK,GAAI;AACbC,iBAAO,EAAE;AACPC,yBAAa,EAAG,UAASH,GAAI;AADtB;AADI,SAAf;AAKA,aAAKP,eAAL,CAAqBW,MAArB,CAA4BH,MAA5B,EAAoCI,IAApC,CAAyCC,QAAO,IAAK;AACnD,eAAKjB,SAAL,GAAiBiB,QAAQ,CAAClB,IAA1B;AACD,SAFD;AAKF;AACF;AAfK,GA1BM;AA2CbmB,SAAO,EAAE;AA3CI,CAAf","names":["mapGetters","ProductoService","name","data","productos","items","label","icon","productoService","created","computed","username","keycloakToken","keycloakTokenParsed","watch","val","config","headers","Authorization","getAll","then","response","methods"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\CrudApp.vue"],"sourcesContent":["<template>\r\n  <div style=\"margin: 0 auto; width: 80%\">\r\n\r\n    <p_panel header=\"Lista de Personas\">\r\n      <p:dataTable :value=\"productos\" :paginator=\"true\" :rows=\"10\"\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n        :rowsPerPageOptions=\"[10, 20, 50]\" responsiveLayout=\"scroll\"\r\n        currentPageReportTemplate=\"Mostrando {first} a {last} de {totalRecords}\">\r\n        <p_column field=\"nombre\" header=\"Nombre\"></p_column>\r\n        <p_column field=\"descripcion\" header=\"DescripciÃ³n\"></p_column>\r\n        <p_column field=\"precio\" header=\"precio\"></p_column>\r\n        <template #paginatorstart>\r\n          <p:commandButton type=\"button\" icon=\"pi pi-refresh\" class=\"p-button-text\" />\r\n        </template>\r\n        <template #paginatorend>\r\n          <p:commandButton type=\"button\" icon=\"pi pi-cloud\" class=\"p-button-text\" />\r\n        </template>\r\n      </p:dataTable>\r\n    </p_panel>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\n\r\nimport { mapGetters } from 'vuex';\r\nimport ProductoService from '@/service/ProductoService';\r\nexport default {\r\n  name: 'CrudApp',\r\n  data() {\r\n    return {\r\n      productos: [],\r\n      items: [\r\n        {\r\n          label: 'Nuevo',\r\n          icon: 'pi pi-fw pi-plus',\r\n        }\r\n\r\n      ]\r\n    }\r\n\r\n  },\r\n  productoService: null,\r\n  created() {\r\n    this.productoService = new ProductoService();\r\n  },\r\n  computed: {\r\n    ...mapGetters({\r\n      username: 'username',\r\n      keycloakToken: 'keycloakToken',\r\n      keycloakTokenParsed: 'keycloakTokenParsed'\r\n    })\r\n  },\r\n  watch: {\r\n\r\n    keycloakToken: function (val) {\r\n      if (val) {\r\n        const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${val}`\r\n          }\r\n        }\r\n        this.productoService.getAll(config).then(response => {\r\n          this.productos = response.data;\r\n        });\r\n\r\n\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}