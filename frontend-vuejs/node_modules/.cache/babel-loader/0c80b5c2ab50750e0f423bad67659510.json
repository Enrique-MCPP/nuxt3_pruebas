{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport Keycloak from 'keycloak-js';\nimport PrimeVue from 'primevue/config';\nimport VTooltip from 'v-tooltip';\nimport 'primevue/resources/themes/nova/theme.css'; //import 'primevue/resources/themes/lara-light-indigo/theme.css'\n\nimport 'primevue/resources/primevue.min.css';\nimport 'primeicons/primeicons.css';\nimport Toast from 'primevue/toast';\nimport ToastService from 'primevue/toastservice';\nimport InputText from 'primevue/inputtext';\nimport DataTable from 'primevue/datatable';\nimport Column from 'primevue/column';\nimport Panel from 'primevue/panel';\nimport Menubar from 'primevue/menubar';\nimport Button from 'primevue/button';\nconst app = createApp(App);\napp.use(PrimeVue);\napp.use(ToastService);\napp.use(VTooltip);\napp.component('p:inputText', InputText);\napp.component('p_toast', Toast);\napp.component('p:dataTable', DataTable);\napp.component('p_column', Column);\napp.component('p:commandButton', Button);\napp.component('p_panel', Panel);\napp.component('p_menubar', Menubar); // JSON VIEWER\n\nimport JsonViewer from \"vue3-json-viewer\";\nimport \"vue3-json-viewer/dist/index.css\";\napp.use(JsonViewer); // EVENTBUS\n\nimport mitt from 'mitt';\nconst emitter = mitt();\napp.config.globalProperties.emitter = emitter; // VUEX\n\nimport store from \"@/store/user\";\napp.use(store); // AXIOS\n\nimport axios from 'axios';\nimport VueAxios from 'vue-axios';\napp.use(VueAxios, axios);\n/*\r\n// KEYCLOAK\r\nconst initOptions = {\r\n    url: process.env.VUE_APP_KEYCLOAK_API_URL,\r\n    realm: process.env.VUE_APP_KEYCLOAK_REALM,\r\n    clientId: process.env.VUE_APP_KEYCLOAK_CLIENT_ID,\r\n}\r\n\r\nconst keycloak = Keycloak(initOptions)\r\n\r\nkeycloak.init({ onLoad: 'login-required' }).then(() => {\r\n    let roles = keycloak.realmAccess.roles;\r\n    roles = roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n    store.commit('setUserName', keycloak.tokenParsed.preferred_username)\r\n    store.commit('setKeycloakToken', keycloak.token)\r\n    store.commit('setKeycloakTokenParsed', keycloak.tokenParsed)\r\n    store.commit('setRoles', roles);\r\n\r\n    emitter.on('keycloak-logout', () => {\r\n        keycloak.logout()\r\n    })\r\n\r\n    // Token Refresh\r\n    setInterval(() => {\r\n        keycloak\r\n            .updateToken(70)\r\n            .then((refreshed) => {\r\n                if (refreshed) {\r\n                    let roles = keycloak.realmAccess.roles;\r\n                    roles = roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n                    store.commit('setUserName', keycloak.tokenParsed.preferred_username)\r\n                    store.commit('setKeycloakToken', keycloak.token)\r\n                    store.commit('setKeycloakTokenParsed', keycloak.tokenParsed)\r\n                    store.commit('setRoles', roles)\r\n                    console.info('Token refreshed' + refreshed)\r\n                } else {\r\n                    console.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds')\r\n                }\r\n            })\r\n            .catch(() => {\r\n                keycloak.logout()\r\n            })\r\n    }, 60 * 1000)\r\n})\r\n*/\n\napp.mount('#app');","map":{"version":3,"sources":["C:/Users/emalc/OneDrive/Escritorio/CRUD_keycloak_primeVue/keycloak-workshop/frontend-vuejs/src/main.js"],"names":["createApp","App","Keycloak","PrimeVue","VTooltip","Toast","ToastService","InputText","DataTable","Column","Panel","Menubar","Button","app","use","component","JsonViewer","mitt","emitter","config","globalProperties","store","axios","VueAxios","mount"],"mappings":"AAAA,SAASA,SAAT,QAA0B,KAA1B;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,0CAAP,C,CACA;;AACA,OAAO,qCAAP;AACA,OAAO,2BAAP;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,MAAMC,GAAG,GAAGb,SAAS,CAACC,GAAD,CAArB;AACAY,GAAG,CAACC,GAAJ,CAAQX,QAAR;AACAU,GAAG,CAACC,GAAJ,CAAQR,YAAR;AACAO,GAAG,CAACC,GAAJ,CAAQV,QAAR;AACAS,GAAG,CAACE,SAAJ,CAAc,aAAd,EAA6BR,SAA7B;AACAM,GAAG,CAACE,SAAJ,CAAc,SAAd,EAAyBV,KAAzB;AACAQ,GAAG,CAACE,SAAJ,CAAc,aAAd,EAA6BP,SAA7B;AACAK,GAAG,CAACE,SAAJ,CAAc,UAAd,EAA0BN,MAA1B;AACAI,GAAG,CAACE,SAAJ,CAAc,iBAAd,EAAiCH,MAAjC;AACAC,GAAG,CAACE,SAAJ,CAAc,SAAd,EAAyBL,KAAzB;AACAG,GAAG,CAACE,SAAJ,CAAc,WAAd,EAA2BJ,OAA3B,E,CACA;;AACA,OAAOK,UAAP,MAAuB,kBAAvB;AACA,OAAO,iCAAP;AACAH,GAAG,CAACC,GAAJ,CAAQE,UAAR,E,CAEA;;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,MAAMC,OAAO,GAAGD,IAAI,EAApB;AACAJ,GAAG,CAACM,MAAJ,CAAWC,gBAAX,CAA4BF,OAA5B,GAAsCA,OAAtC,C,CAEA;;AACA,OAAOG,KAAP,MAAkB,cAAlB;AACAR,GAAG,CAACC,GAAJ,CAAQO,KAAR,E,CAEA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACAV,GAAG,CAACC,GAAJ,CAAQS,QAAR,EAAkBD,KAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,GAAG,CAACW,KAAJ,CAAU,MAAV","sourcesContent":["import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport Keycloak from 'keycloak-js'\r\nimport PrimeVue from 'primevue/config';\r\nimport VTooltip from 'v-tooltip';\r\n\r\nimport 'primevue/resources/themes/nova/theme.css'\r\n//import 'primevue/resources/themes/lara-light-indigo/theme.css'\r\nimport 'primevue/resources/primevue.min.css'\r\nimport 'primeicons/primeicons.css'\r\nimport Toast from 'primevue/toast';\r\nimport ToastService from 'primevue/toastservice';\r\nimport InputText from 'primevue/inputtext';\r\nimport DataTable from 'primevue/datatable';\r\nimport Column from 'primevue/column';\r\nimport Panel from 'primevue/panel';\r\nimport Menubar from 'primevue/menubar';\r\n\r\nimport Button from 'primevue/button';\r\n\r\nconst app = createApp(App);\r\napp.use(PrimeVue);\r\napp.use(ToastService);\r\napp.use(VTooltip);\r\napp.component('p:inputText', InputText);\r\napp.component('p_toast', Toast);\r\napp.component('p:dataTable', DataTable);\r\napp.component('p_column', Column);\r\napp.component('p:commandButton', Button);\r\napp.component('p_panel', Panel);\r\napp.component('p_menubar', Menubar);\r\n// JSON VIEWER\r\nimport JsonViewer from \"vue3-json-viewer\";\r\nimport \"vue3-json-viewer/dist/index.css\";\r\napp.use(JsonViewer);\r\n\r\n// EVENTBUS\r\nimport mitt from 'mitt';\r\nconst emitter = mitt();\r\napp.config.globalProperties.emitter = emitter;\r\n\r\n// VUEX\r\nimport store from \"@/store/user\";\r\napp.use(store)\r\n\r\n// AXIOS\r\nimport axios from 'axios'\r\nimport VueAxios from 'vue-axios'\r\napp.use(VueAxios, axios)\r\n\r\n/*\r\n// KEYCLOAK\r\nconst initOptions = {\r\n    url: process.env.VUE_APP_KEYCLOAK_API_URL,\r\n    realm: process.env.VUE_APP_KEYCLOAK_REALM,\r\n    clientId: process.env.VUE_APP_KEYCLOAK_CLIENT_ID,\r\n}\r\n\r\nconst keycloak = Keycloak(initOptions)\r\n\r\nkeycloak.init({ onLoad: 'login-required' }).then(() => {\r\n    let roles = keycloak.realmAccess.roles;\r\n    roles = roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n    store.commit('setUserName', keycloak.tokenParsed.preferred_username)\r\n    store.commit('setKeycloakToken', keycloak.token)\r\n    store.commit('setKeycloakTokenParsed', keycloak.tokenParsed)\r\n    store.commit('setRoles', roles);\r\n\r\n    emitter.on('keycloak-logout', () => {\r\n        keycloak.logout()\r\n    })\r\n\r\n    // Token Refresh\r\n    setInterval(() => {\r\n        keycloak\r\n            .updateToken(70)\r\n            .then((refreshed) => {\r\n                if (refreshed) {\r\n                    let roles = keycloak.realmAccess.roles;\r\n                    roles = roles.filter(role => !role.includes(\"offline_access\") && !role.includes(\"uma_authorization\") && !role.includes(\"default-roles-spring-boot-microservices-realm\"));\r\n                    store.commit('setUserName', keycloak.tokenParsed.preferred_username)\r\n                    store.commit('setKeycloakToken', keycloak.token)\r\n                    store.commit('setKeycloakTokenParsed', keycloak.tokenParsed)\r\n                    store.commit('setRoles', roles)\r\n                    console.info('Token refreshed' + refreshed)\r\n                } else {\r\n                    console.warn('Token not refreshed, valid for ' + Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds')\r\n                }\r\n            })\r\n            .catch(() => {\r\n                keycloak.logout()\r\n            })\r\n    }, 60 * 1000)\r\n})\r\n*/\r\napp.mount('#app')"]},"metadata":{},"sourceType":"module"}