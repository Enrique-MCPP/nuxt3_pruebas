{"ast":null,"code":"import { FilterMatchMode } from 'primevue/api';\nimport { mapGetters } from 'vuex';\nimport axios from \"axios\";\nexport default {\n  name: 'zDialog',\n  props: {\n    columns: {\n      type: Array,\n      required: true\n    },\n    data: {\n      type: Array,\n      required: true\n    },\n    header: {\n      type: String,\n      default: \"Lista de elementos\"\n    },\n    selectedEditedRowList: {\n      type: Array,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      filters: {},\n      selectedRow: null,\n      selectedLocalEditedRowList: Object.assign({}, this.selectedEditedRowList),\n      customValueInput: null,\n      displayDialogPedidos: false\n    };\n  },\n\n  watch: {\n    selectedEditedRowList: {\n      handler: function (newVal) {\n        this.selectedLocalEditedRowList = Object.assign({}, newVal);\n      },\n      deep: true\n    }\n  },\n  computed: {\n    globalFilterFields() {\n      return ['global', ...this.columns.map(column => column.field)];\n    },\n\n    currentPageReportTemplate() {\n      return `Mostrando {first} a {last} de ${this.data.length} pedidos`;\n    },\n\n    ...mapGetters({\n      username: 'username',\n      keycloakToken: 'keycloakToken',\n      keycloakTokenParsed: 'keycloakTokenParsed',\n      axiosConfig: 'axiosConfig',\n      roles: 'roles'\n    })\n  },\n\n  async created() {\n    console.log(\"created\");\n    this.initFilters();\n  },\n\n  mounted() {\n    // Recorre los inputs y si existe pathList, realiza una solicitud GET para obtener las opciones del selectOneMenu\n    this.crudInputs.forEach(async input => {\n      if (input.component.includes('select') && input.pathList) {\n        const response = await axios.get(input.pathList, this.axiosConfig);\n        const parsedData = response.data;\n        input.options = parsedData.map(item => ({\n          label: item.nombre,\n          value: item\n        }));\n      }\n    });\n  },\n\n  methods: {\n    onRowSelect(event) {\n      this.selectedLocalEditedRowList = Object.assign({}, event.data);\n    },\n\n    initFilters() {\n      const filters = {\n        'global': {\n          value: null,\n          matchMode: FilterMatchMode.CONTAINS\n        }\n      };\n      this.columns.forEach(column => {\n        filters[column.field] = {\n          value: null,\n          matchMode: FilterMatchMode.CONTAINS\n        };\n      });\n      this.filters = filters;\n    },\n\n    openDialogPedidos() {\n      this.displayDialogPedidos = true;\n    },\n\n    closeDialogPedidos() {\n      this.$refs.productoSeleccionableDatatable.emitProductosSeleccionados();\n      this.displayDialogPedidos = false;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["FilterMatchMode","mapGetters","axios","name","props","columns","type","Array","required","data","header","String","default","selectedEditedRowList","filters","selectedRow","selectedLocalEditedRowList","Object","assign","customValueInput","displayDialogPedidos","watch","handler","newVal","deep","computed","globalFilterFields","map","column","field","currentPageReportTemplate","length","username","keycloakToken","keycloakTokenParsed","axiosConfig","roles","created","console","log","initFilters","mounted","crudInputs","forEach","input","component","includes","pathList","response","get","parsedData","options","item","label","nombre","value","methods","onRowSelect","event","matchMode","CONTAINS","openDialogPedidos","closeDialogPedidos","$refs","productoSeleccionableDatatable","emitProductosSeleccionados"],"sourceRoot":"","sources":["C:\\Users\\emalc\\OneDrive\\Escritorio\\CRUD_keycloak_primeVue\\keycloak-workshop\\frontend-vuejs\\src\\componentes\\ZDialog.vue"],"sourcesContent":["<template>\r\n    <label for=\"botonDialog\" style=\"display: block;\">{{ this.headerBoton }}</label>\r\n    <p:commandButton id=\"botonDialog\" :label=\"this.labelBoton\" icon=\"pi pi-external-link\" @click=\"openDialogPedidos\"\r\n         style=\"vertical-align: middle;\" />\r\n    <p_dialog header=\"Selecciona los productos\" v-model:visible=\"displayDialogPedidos\"\r\n        :breakpoints=\"{ '960px': '75vw', '640px': '90vw' }\" :style=\"{ width: '50vw' }\">\r\n        <template #footer>\r\n            <div style=\"margin: 0 auto; width: 80%\">\r\n                <p_panel :header=\"header\">\r\n                    <p:dataTable :value=\"data\" :paginator=\"true\" :rows=\"10\" v-model:selection=\"selectedRowsList\"\r\n                        class=\"p-datatable-pedidos\" @row-click=\"onRowSelect\" dataKey=\"id\"\r\n                        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown\"\r\n                        :rowsPerPageOptions=\"[10, 20, 50]\" responsiveLayout=\"scroll\" filterDisplay=\"row\"\r\n                        :globalFilterFields=\"globalFilterFields\" v-model:filters=\"filters\"\r\n                        currentPageReportTemplate=\"Mostrando {first} a {last} de {totalRecords}\">\r\n                        <template #header>\r\n                            <div class=\"flex justify-content-end\">\r\n                                <span class=\"p-input-icon-left \">\r\n                                    <i class=\"pi pi-search\" />\r\n                                    <p:inputText v-model=\"filters['global'].value\" placeholder=\"Buscar...\" />\r\n                                </span>\r\n                            </div>\r\n                        </template>\r\n                        <template #empty>\r\n                            No hay elementos disponibles.\r\n                        </template>\r\n                        <template #loading>\r\n                            Cargando elementos. Por favor, espera.\r\n                        </template>\r\n                        <p_column selection-mode=\"multiple\" header-style=\"width: 3em\"></p_column>\r\n                        <p_column v-for=\"column in columns\" :field=\"column.field\" :header=\"column.title\" :key=\"column.field\"\r\n                            :ref=\"column.field\" :sortable=\"true\">\r\n                            <template #filter=\"{ filterModel, filterCallback }\">\r\n                                <p:inputText type=\"text\" v-model=\"filterModel.value\" @keyup=\"filterCallback()\"\r\n                                    class=\"p-column-filter\" :placeholder=\"'Buscar por ' + column.title\" />\r\n                            </template>\r\n                        </p_column>\r\n\r\n                    </p:dataTable>\r\n                </p_panel>\r\n            </div>\r\n            <p:commandButton label=\"No\" icon=\"pi pi-times\" @click=\"closeDialogPedidos\" class=\"p-button-text\" />\r\n            <p:commandButton label=\"SÃ­\" icon=\"pi pi-check\" @click=\"closeDialogPedidos\" autofocus />\r\n\r\n\r\n        </template>\r\n    </p_dialog>\r\n</template>\r\n  \r\n<script>\r\nimport { FilterMatchMode } from 'primevue/api';\r\nimport { mapGetters } from 'vuex';\r\nimport axios from \"axios\";\r\nexport default {\r\n    name: 'zDialog',\r\n    props: {\r\n        columns: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        data: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        header: {\r\n            type: String,\r\n            default: \"Lista de elementos\"\r\n        },\r\n        selectedEditedRowList: {\r\n            type: Array,\r\n            default: null\r\n        },\r\n\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            filters: {},\r\n            selectedRow: null,\r\n            selectedLocalEditedRowList: Object.assign({}, this.selectedEditedRowList),\r\n            customValueInput: null,\r\n            displayDialogPedidos: false,\r\n\r\n        }\r\n\r\n    },\r\n    watch: {\r\n        selectedEditedRowList: {\r\n            handler: function (newVal) {\r\n                this.selectedLocalEditedRowList = Object.assign({}, newVal);\r\n            },\r\n            deep: true\r\n        },\r\n\r\n    }\r\n    ,\r\n    computed: {\r\n        globalFilterFields() {\r\n            return [\r\n                'global',\r\n                ...this.columns.map((column) => column.field)\r\n            ];\r\n        },\r\n        currentPageReportTemplate() {\r\n            return `Mostrando {first} a {last} de ${this.data.length} pedidos`;\r\n        },\r\n        ...mapGetters({\r\n            username: 'username',\r\n            keycloakToken: 'keycloakToken',\r\n            keycloakTokenParsed: 'keycloakTokenParsed',\r\n            axiosConfig: 'axiosConfig',\r\n            roles: 'roles',\r\n        }),\r\n\r\n    },\r\n    async created() {\r\n        console.log(\"created\");\r\n        this.initFilters();\r\n    },\r\n    mounted() {\r\n        // Recorre los inputs y si existe pathList, realiza una solicitud GET para obtener las opciones del selectOneMenu\r\n        this.crudInputs.forEach(async (input) => {\r\n            if (input.component.includes('select') && input.pathList) {\r\n                const response = await axios.get(input.pathList, this.axiosConfig);\r\n                const parsedData = response.data;\r\n                input.options = parsedData.map((item) => ({\r\n                    label: item.nombre,\r\n                    value: item,\r\n                }));\r\n            }\r\n        });\r\n    },\r\n    methods: {\r\n        onRowSelect(event) {\r\n            this.selectedLocalEditedRowList = Object.assign({}, event.data);\r\n        },\r\n        initFilters() {\r\n            const filters = {\r\n                'global': { value: null, matchMode: FilterMatchMode.CONTAINS }\r\n            };\r\n            this.columns.forEach((column) => {\r\n                filters[column.field] = {\r\n                    value: null,\r\n                    matchMode: FilterMatchMode.CONTAINS\r\n                };\r\n            });\r\n            this.filters = filters;\r\n        },\r\n\r\n        openDialogPedidos() {\r\n            this.displayDialogPedidos = true;\r\n        },\r\n        closeDialogPedidos() {\r\n            this.$refs.productoSeleccionableDatatable.emitProductosSeleccionados();\r\n            this.displayDialogPedidos = false;\r\n        },\r\n    }\r\n}\r\n</script>\r\n  \r\n\r\n<style lang=\"scss\" scoped>\r\n::v-deep(.p-datatable.p-datatable-pedidos) {\r\n    .p-datatable-header {\r\n        padding: 1rem;\r\n        text-align: left;\r\n        font-size: 1.5rem;\r\n    }\r\n\r\n    .p-paginator {\r\n        padding: 1rem;\r\n    }\r\n\r\n    .p-datatable-thead>tr>th {\r\n        text-align: left;\r\n    }\r\n\r\n    .p-datatable-tbody>tr>td {\r\n        cursor: auto;\r\n    }\r\n\r\n    .p-dropdown-label:not(.p-placeholder) {\r\n        text-transform: uppercase;\r\n    }\r\n}\r\n\r\n.panel-flex {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n}\r\n\r\n.panel-flex>div {\r\n    flex-basis: calc(25% - 10px);\r\n    margin-right: 10px;\r\n    margin-bottom: 20px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}